/*!
* cryptography library
*
* Copyright (c) 2022 tako
*
* This software is released under the MIT license.
* see https://opensource.org/licenses/MIT
*/

#include "aes.h"

namespace cryptography {

#define AES_SENTENCE_SIZE       128

#define AES128_ROUNDS           10
#define AES192_ROUNDS           12
#define AES256_ROUNDS           14

#define AES128_KEY_BYTE_SIZE    16
#define AES192_KEY_BYTE_SIZE    24
#define AES256_KEY_BYTE_SIZE    32

#define AES128_KEY_CONV_SIZE    4
#define AES192_KEY_CONV_SIZE    6
#define AES256_KEY_CONV_SIZE    8

#define SUCCESS                 0
#define FAILURE                 1

static const uint8_t sbox[256] = {
  0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76, 
  0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0, 
  0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15, 
  0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75, 
  0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84, 
  0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf, 
  0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8, 
  0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2, 
  0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73, 
  0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb, 
  0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79, 
  0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08, 
  0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a, 
  0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e, 
  0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf, 
  0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16,
};

static const uint8_t invsbox[256] = {
  0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb, 
  0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb, 
  0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e, 
  0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25, 
  0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92, 
  0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84, 
  0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06, 
  0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b, 
  0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73, 
  0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e, 
  0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b, 
  0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4, 
  0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f, 
  0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef, 
  0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61, 
  0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d,
};

static const uint32_t rcon[11] = {
  0x0000'0000, 0x0000'0001, 0x0000'0002, 0x0000'0004, 0x0000'0008, 0x0000'0010, 
  0x0000'0020, 0x0000'0040, 0x0000'0080, 0x0000'001b, 0x0000'0036,
};

static const uint8_t lut_gf_mult[15][256] = {
  {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  },
  {
    0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 
    0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 
    0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f, 
    0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f, 
    0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f, 
    0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x5b, 0x5c, 0x5d, 0x5e, 0x5f, 
    0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f, 
    0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x7b, 0x7c, 0x7d, 0x7e, 0x7f, 
    0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8a, 0x8b, 0x8c, 0x8d, 0x8e, 0x8f, 
    0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9a, 0x9b, 0x9c, 0x9d, 0x9e, 0x9f, 
    0xa0, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xab, 0xac, 0xad, 0xae, 0xaf, 
    0xb0, 0xb1, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xba, 0xbb, 0xbc, 0xbd, 0xbe, 0xbf, 
    0xc0, 0xc1, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xcb, 0xcc, 0xcd, 0xce, 0xcf, 
    0xd0, 0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8, 0xd9, 0xda, 0xdb, 0xdc, 0xdd, 0xde, 0xdf, 
    0xe0, 0xe1, 0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9, 0xea, 0xeb, 0xec, 0xed, 0xee, 0xef, 
    0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd, 0xfe, 0xff,
  },
  {
    0x00, 0x02, 0x04, 0x06, 0x08, 0x0a, 0x0c, 0x0e, 0x10, 0x12, 0x14, 0x16, 0x18, 0x1a, 0x1c, 0x1e, 
    0x20, 0x22, 0x24, 0x26, 0x28, 0x2a, 0x2c, 0x2e, 0x30, 0x32, 0x34, 0x36, 0x38, 0x3a, 0x3c, 0x3e, 
    0x40, 0x42, 0x44, 0x46, 0x48, 0x4a, 0x4c, 0x4e, 0x50, 0x52, 0x54, 0x56, 0x58, 0x5a, 0x5c, 0x5e, 
    0x60, 0x62, 0x64, 0x66, 0x68, 0x6a, 0x6c, 0x6e, 0x70, 0x72, 0x74, 0x76, 0x78, 0x7a, 0x7c, 0x7e, 
    0x80, 0x82, 0x84, 0x86, 0x88, 0x8a, 0x8c, 0x8e, 0x90, 0x92, 0x94, 0x96, 0x98, 0x9a, 0x9c, 0x9e, 
    0xa0, 0xa2, 0xa4, 0xa6, 0xa8, 0xaa, 0xac, 0xae, 0xb0, 0xb2, 0xb4, 0xb6, 0xb8, 0xba, 0xbc, 0xbe, 
    0xc0, 0xc2, 0xc4, 0xc6, 0xc8, 0xca, 0xcc, 0xce, 0xd0, 0xd2, 0xd4, 0xd6, 0xd8, 0xda, 0xdc, 0xde, 
    0xe0, 0xe2, 0xe4, 0xe6, 0xe8, 0xea, 0xec, 0xee, 0xf0, 0xf2, 0xf4, 0xf6, 0xf8, 0xfa, 0xfc, 0xfe, 
    0x1b, 0x19, 0x1f, 0x1d, 0x13, 0x11, 0x17, 0x15, 0x0b, 0x09, 0x0f, 0x0d, 0x03, 0x01, 0x07, 0x05, 
    0x3b, 0x39, 0x3f, 0x3d, 0x33, 0x31, 0x37, 0x35, 0x2b, 0x29, 0x2f, 0x2d, 0x23, 0x21, 0x27, 0x25, 
    0x5b, 0x59, 0x5f, 0x5d, 0x53, 0x51, 0x57, 0x55, 0x4b, 0x49, 0x4f, 0x4d, 0x43, 0x41, 0x47, 0x45, 
    0x7b, 0x79, 0x7f, 0x7d, 0x73, 0x71, 0x77, 0x75, 0x6b, 0x69, 0x6f, 0x6d, 0x63, 0x61, 0x67, 0x65, 
    0x9b, 0x99, 0x9f, 0x9d, 0x93, 0x91, 0x97, 0x95, 0x8b, 0x89, 0x8f, 0x8d, 0x83, 0x81, 0x87, 0x85, 
    0xbb, 0xb9, 0xbf, 0xbd, 0xb3, 0xb1, 0xb7, 0xb5, 0xab, 0xa9, 0xaf, 0xad, 0xa3, 0xa1, 0xa7, 0xa5, 
    0xdb, 0xd9, 0xdf, 0xdd, 0xd3, 0xd1, 0xd7, 0xd5, 0xcb, 0xc9, 0xcf, 0xcd, 0xc3, 0xc1, 0xc7, 0xc5, 
    0xfb, 0xf9, 0xff, 0xfd, 0xf3, 0xf1, 0xf7, 0xf5, 0xeb, 0xe9, 0xef, 0xed, 0xe3, 0xe1, 0xe7, 0xe5,
  },
  {
    0x00, 0x03, 0x06, 0x05, 0x0c, 0x0f, 0x0a, 0x09, 0x18, 0x1b, 0x1e, 0x1d, 0x14, 0x17, 0x12, 0x11, 
    0x30, 0x33, 0x36, 0x35, 0x3c, 0x3f, 0x3a, 0x39, 0x28, 0x2b, 0x2e, 0x2d, 0x24, 0x27, 0x22, 0x21, 
    0x60, 0x63, 0x66, 0x65, 0x6c, 0x6f, 0x6a, 0x69, 0x78, 0x7b, 0x7e, 0x7d, 0x74, 0x77, 0x72, 0x71, 
    0x50, 0x53, 0x56, 0x55, 0x5c, 0x5f, 0x5a, 0x59, 0x48, 0x4b, 0x4e, 0x4d, 0x44, 0x47, 0x42, 0x41, 
    0xc0, 0xc3, 0xc6, 0xc5, 0xcc, 0xcf, 0xca, 0xc9, 0xd8, 0xdb, 0xde, 0xdd, 0xd4, 0xd7, 0xd2, 0xd1, 
    0xf0, 0xf3, 0xf6, 0xf5, 0xfc, 0xff, 0xfa, 0xf9, 0xe8, 0xeb, 0xee, 0xed, 0xe4, 0xe7, 0xe2, 0xe1, 
    0xa0, 0xa3, 0xa6, 0xa5, 0xac, 0xaf, 0xaa, 0xa9, 0xb8, 0xbb, 0xbe, 0xbd, 0xb4, 0xb7, 0xb2, 0xb1, 
    0x90, 0x93, 0x96, 0x95, 0x9c, 0x9f, 0x9a, 0x99, 0x88, 0x8b, 0x8e, 0x8d, 0x84, 0x87, 0x82, 0x81, 
    0x9b, 0x98, 0x9d, 0x9e, 0x97, 0x94, 0x91, 0x92, 0x83, 0x80, 0x85, 0x86, 0x8f, 0x8c, 0x89, 0x8a, 
    0xab, 0xa8, 0xad, 0xae, 0xa7, 0xa4, 0xa1, 0xa2, 0xb3, 0xb0, 0xb5, 0xb6, 0xbf, 0xbc, 0xb9, 0xba, 
    0xfb, 0xf8, 0xfd, 0xfe, 0xf7, 0xf4, 0xf1, 0xf2, 0xe3, 0xe0, 0xe5, 0xe6, 0xef, 0xec, 0xe9, 0xea, 
    0xcb, 0xc8, 0xcd, 0xce, 0xc7, 0xc4, 0xc1, 0xc2, 0xd3, 0xd0, 0xd5, 0xd6, 0xdf, 0xdc, 0xd9, 0xda, 
    0x5b, 0x58, 0x5d, 0x5e, 0x57, 0x54, 0x51, 0x52, 0x43, 0x40, 0x45, 0x46, 0x4f, 0x4c, 0x49, 0x4a, 
    0x6b, 0x68, 0x6d, 0x6e, 0x67, 0x64, 0x61, 0x62, 0x73, 0x70, 0x75, 0x76, 0x7f, 0x7c, 0x79, 0x7a, 
    0x3b, 0x38, 0x3d, 0x3e, 0x37, 0x34, 0x31, 0x32, 0x23, 0x20, 0x25, 0x26, 0x2f, 0x2c, 0x29, 0x2a, 
    0x0b, 0x08, 0x0d, 0x0e, 0x07, 0x04, 0x01, 0x02, 0x13, 0x10, 0x15, 0x16, 0x1f, 0x1c, 0x19, 0x1a,
  },
  {
    0x00, 0x04, 0x08, 0x0c, 0x10, 0x14, 0x18, 0x1c, 0x20, 0x24, 0x28, 0x2c, 0x30, 0x34, 0x38, 0x3c, 
    0x40, 0x44, 0x48, 0x4c, 0x50, 0x54, 0x58, 0x5c, 0x60, 0x64, 0x68, 0x6c, 0x70, 0x74, 0x78, 0x7c, 
    0x80, 0x84, 0x88, 0x8c, 0x90, 0x94, 0x98, 0x9c, 0xa0, 0xa4, 0xa8, 0xac, 0xb0, 0xb4, 0xb8, 0xbc, 
    0xc0, 0xc4, 0xc8, 0xcc, 0xd0, 0xd4, 0xd8, 0xdc, 0xe0, 0xe4, 0xe8, 0xec, 0xf0, 0xf4, 0xf8, 0xfc, 
    0x1b, 0x1f, 0x13, 0x17, 0x0b, 0x0f, 0x03, 0x07, 0x3b, 0x3f, 0x33, 0x37, 0x2b, 0x2f, 0x23, 0x27, 
    0x5b, 0x5f, 0x53, 0x57, 0x4b, 0x4f, 0x43, 0x47, 0x7b, 0x7f, 0x73, 0x77, 0x6b, 0x6f, 0x63, 0x67, 
    0x9b, 0x9f, 0x93, 0x97, 0x8b, 0x8f, 0x83, 0x87, 0xbb, 0xbf, 0xb3, 0xb7, 0xab, 0xaf, 0xa3, 0xa7, 
    0xdb, 0xdf, 0xd3, 0xd7, 0xcb, 0xcf, 0xc3, 0xc7, 0xfb, 0xff, 0xf3, 0xf7, 0xeb, 0xef, 0xe3, 0xe7, 
    0x36, 0x32, 0x3e, 0x3a, 0x26, 0x22, 0x2e, 0x2a, 0x16, 0x12, 0x1e, 0x1a, 0x06, 0x02, 0x0e, 0x0a, 
    0x76, 0x72, 0x7e, 0x7a, 0x66, 0x62, 0x6e, 0x6a, 0x56, 0x52, 0x5e, 0x5a, 0x46, 0x42, 0x4e, 0x4a, 
    0xb6, 0xb2, 0xbe, 0xba, 0xa6, 0xa2, 0xae, 0xaa, 0x96, 0x92, 0x9e, 0x9a, 0x86, 0x82, 0x8e, 0x8a, 
    0xf6, 0xf2, 0xfe, 0xfa, 0xe6, 0xe2, 0xee, 0xea, 0xd6, 0xd2, 0xde, 0xda, 0xc6, 0xc2, 0xce, 0xca, 
    0x2d, 0x29, 0x25, 0x21, 0x3d, 0x39, 0x35, 0x31, 0x0d, 0x09, 0x05, 0x01, 0x1d, 0x19, 0x15, 0x11, 
    0x6d, 0x69, 0x65, 0x61, 0x7d, 0x79, 0x75, 0x71, 0x4d, 0x49, 0x45, 0x41, 0x5d, 0x59, 0x55, 0x51, 
    0xad, 0xa9, 0xa5, 0xa1, 0xbd, 0xb9, 0xb5, 0xb1, 0x8d, 0x89, 0x85, 0x81, 0x9d, 0x99, 0x95, 0x91, 
    0xed, 0xe9, 0xe5, 0xe1, 0xfd, 0xf9, 0xf5, 0xf1, 0xcd, 0xc9, 0xc5, 0xc1, 0xdd, 0xd9, 0xd5, 0xd1,
  },
  {
    0x00, 0x05, 0x0a, 0x0f, 0x14, 0x11, 0x1e, 0x1b, 0x28, 0x2d, 0x22, 0x27, 0x3c, 0x39, 0x36, 0x33, 
    0x50, 0x55, 0x5a, 0x5f, 0x44, 0x41, 0x4e, 0x4b, 0x78, 0x7d, 0x72, 0x77, 0x6c, 0x69, 0x66, 0x63, 
    0xa0, 0xa5, 0xaa, 0xaf, 0xb4, 0xb1, 0xbe, 0xbb, 0x88, 0x8d, 0x82, 0x87, 0x9c, 0x99, 0x96, 0x93, 
    0xf0, 0xf5, 0xfa, 0xff, 0xe4, 0xe1, 0xee, 0xeb, 0xd8, 0xdd, 0xd2, 0xd7, 0xcc, 0xc9, 0xc6, 0xc3, 
    0x5b, 0x5e, 0x51, 0x54, 0x4f, 0x4a, 0x45, 0x40, 0x73, 0x76, 0x79, 0x7c, 0x67, 0x62, 0x6d, 0x68, 
    0x0b, 0x0e, 0x01, 0x04, 0x1f, 0x1a, 0x15, 0x10, 0x23, 0x26, 0x29, 0x2c, 0x37, 0x32, 0x3d, 0x38, 
    0xfb, 0xfe, 0xf1, 0xf4, 0xef, 0xea, 0xe5, 0xe0, 0xd3, 0xd6, 0xd9, 0xdc, 0xc7, 0xc2, 0xcd, 0xc8, 
    0xab, 0xae, 0xa1, 0xa4, 0xbf, 0xba, 0xb5, 0xb0, 0x83, 0x86, 0x89, 0x8c, 0x97, 0x92, 0x9d, 0x98, 
    0xb6, 0xb3, 0xbc, 0xb9, 0xa2, 0xa7, 0xa8, 0xad, 0x9e, 0x9b, 0x94, 0x91, 0x8a, 0x8f, 0x80, 0x85, 
    0xe6, 0xe3, 0xec, 0xe9, 0xf2, 0xf7, 0xf8, 0xfd, 0xce, 0xcb, 0xc4, 0xc1, 0xda, 0xdf, 0xd0, 0xd5, 
    0x16, 0x13, 0x1c, 0x19, 0x02, 0x07, 0x08, 0x0d, 0x3e, 0x3b, 0x34, 0x31, 0x2a, 0x2f, 0x20, 0x25, 
    0x46, 0x43, 0x4c, 0x49, 0x52, 0x57, 0x58, 0x5d, 0x6e, 0x6b, 0x64, 0x61, 0x7a, 0x7f, 0x70, 0x75, 
    0xed, 0xe8, 0xe7, 0xe2, 0xf9, 0xfc, 0xf3, 0xf6, 0xc5, 0xc0, 0xcf, 0xca, 0xd1, 0xd4, 0xdb, 0xde, 
    0xbd, 0xb8, 0xb7, 0xb2, 0xa9, 0xac, 0xa3, 0xa6, 0x95, 0x90, 0x9f, 0x9a, 0x81, 0x84, 0x8b, 0x8e, 
    0x4d, 0x48, 0x47, 0x42, 0x59, 0x5c, 0x53, 0x56, 0x65, 0x60, 0x6f, 0x6a, 0x71, 0x74, 0x7b, 0x7e, 
    0x1d, 0x18, 0x17, 0x12, 0x09, 0x0c, 0x03, 0x06, 0x35, 0x30, 0x3f, 0x3a, 0x21, 0x24, 0x2b, 0x2e,
  },
  {
    0x00, 0x06, 0x0c, 0x0a, 0x18, 0x1e, 0x14, 0x12, 0x30, 0x36, 0x3c, 0x3a, 0x28, 0x2e, 0x24, 0x22, 
    0x60, 0x66, 0x6c, 0x6a, 0x78, 0x7e, 0x74, 0x72, 0x50, 0x56, 0x5c, 0x5a, 0x48, 0x4e, 0x44, 0x42, 
    0xc0, 0xc6, 0xcc, 0xca, 0xd8, 0xde, 0xd4, 0xd2, 0xf0, 0xf6, 0xfc, 0xfa, 0xe8, 0xee, 0xe4, 0xe2, 
    0xa0, 0xa6, 0xac, 0xaa, 0xb8, 0xbe, 0xb4, 0xb2, 0x90, 0x96, 0x9c, 0x9a, 0x88, 0x8e, 0x84, 0x82, 
    0x9b, 0x9d, 0x97, 0x91, 0x83, 0x85, 0x8f, 0x89, 0xab, 0xad, 0xa7, 0xa1, 0xb3, 0xb5, 0xbf, 0xb9, 
    0xfb, 0xfd, 0xf7, 0xf1, 0xe3, 0xe5, 0xef, 0xe9, 0xcb, 0xcd, 0xc7, 0xc1, 0xd3, 0xd5, 0xdf, 0xd9, 
    0x5b, 0x5d, 0x57, 0x51, 0x43, 0x45, 0x4f, 0x49, 0x6b, 0x6d, 0x67, 0x61, 0x73, 0x75, 0x7f, 0x79, 
    0x3b, 0x3d, 0x37, 0x31, 0x23, 0x25, 0x2f, 0x29, 0x0b, 0x0d, 0x07, 0x01, 0x13, 0x15, 0x1f, 0x19, 
    0x2d, 0x2b, 0x21, 0x27, 0x35, 0x33, 0x39, 0x3f, 0x1d, 0x1b, 0x11, 0x17, 0x05, 0x03, 0x09, 0x0f, 
    0x4d, 0x4b, 0x41, 0x47, 0x55, 0x53, 0x59, 0x5f, 0x7d, 0x7b, 0x71, 0x77, 0x65, 0x63, 0x69, 0x6f, 
    0xed, 0xeb, 0xe1, 0xe7, 0xf5, 0xf3, 0xf9, 0xff, 0xdd, 0xdb, 0xd1, 0xd7, 0xc5, 0xc3, 0xc9, 0xcf, 
    0x8d, 0x8b, 0x81, 0x87, 0x95, 0x93, 0x99, 0x9f, 0xbd, 0xbb, 0xb1, 0xb7, 0xa5, 0xa3, 0xa9, 0xaf, 
    0xb6, 0xb0, 0xba, 0xbc, 0xae, 0xa8, 0xa2, 0xa4, 0x86, 0x80, 0x8a, 0x8c, 0x9e, 0x98, 0x92, 0x94, 
    0xd6, 0xd0, 0xda, 0xdc, 0xce, 0xc8, 0xc2, 0xc4, 0xe6, 0xe0, 0xea, 0xec, 0xfe, 0xf8, 0xf2, 0xf4, 
    0x76, 0x70, 0x7a, 0x7c, 0x6e, 0x68, 0x62, 0x64, 0x46, 0x40, 0x4a, 0x4c, 0x5e, 0x58, 0x52, 0x54, 
    0x16, 0x10, 0x1a, 0x1c, 0x0e, 0x08, 0x02, 0x04, 0x26, 0x20, 0x2a, 0x2c, 0x3e, 0x38, 0x32, 0x34,
  },
  {
    0x00, 0x07, 0x0e, 0x09, 0x1c, 0x1b, 0x12, 0x15, 0x38, 0x3f, 0x36, 0x31, 0x24, 0x23, 0x2a, 0x2d, 
    0x70, 0x77, 0x7e, 0x79, 0x6c, 0x6b, 0x62, 0x65, 0x48, 0x4f, 0x46, 0x41, 0x54, 0x53, 0x5a, 0x5d, 
    0xe0, 0xe7, 0xee, 0xe9, 0xfc, 0xfb, 0xf2, 0xf5, 0xd8, 0xdf, 0xd6, 0xd1, 0xc4, 0xc3, 0xca, 0xcd, 
    0x90, 0x97, 0x9e, 0x99, 0x8c, 0x8b, 0x82, 0x85, 0xa8, 0xaf, 0xa6, 0xa1, 0xb4, 0xb3, 0xba, 0xbd, 
    0xdb, 0xdc, 0xd5, 0xd2, 0xc7, 0xc0, 0xc9, 0xce, 0xe3, 0xe4, 0xed, 0xea, 0xff, 0xf8, 0xf1, 0xf6, 
    0xab, 0xac, 0xa5, 0xa2, 0xb7, 0xb0, 0xb9, 0xbe, 0x93, 0x94, 0x9d, 0x9a, 0x8f, 0x88, 0x81, 0x86, 
    0x3b, 0x3c, 0x35, 0x32, 0x27, 0x20, 0x29, 0x2e, 0x03, 0x04, 0x0d, 0x0a, 0x1f, 0x18, 0x11, 0x16, 
    0x4b, 0x4c, 0x45, 0x42, 0x57, 0x50, 0x59, 0x5e, 0x73, 0x74, 0x7d, 0x7a, 0x6f, 0x68, 0x61, 0x66, 
    0xad, 0xaa, 0xa3, 0xa4, 0xb1, 0xb6, 0xbf, 0xb8, 0x95, 0x92, 0x9b, 0x9c, 0x89, 0x8e, 0x87, 0x80, 
    0xdd, 0xda, 0xd3, 0xd4, 0xc1, 0xc6, 0xcf, 0xc8, 0xe5, 0xe2, 0xeb, 0xec, 0xf9, 0xfe, 0xf7, 0xf0, 
    0x4d, 0x4a, 0x43, 0x44, 0x51, 0x56, 0x5f, 0x58, 0x75, 0x72, 0x7b, 0x7c, 0x69, 0x6e, 0x67, 0x60, 
    0x3d, 0x3a, 0x33, 0x34, 0x21, 0x26, 0x2f, 0x28, 0x05, 0x02, 0x0b, 0x0c, 0x19, 0x1e, 0x17, 0x10, 
    0x76, 0x71, 0x78, 0x7f, 0x6a, 0x6d, 0x64, 0x63, 0x4e, 0x49, 0x40, 0x47, 0x52, 0x55, 0x5c, 0x5b, 
    0x06, 0x01, 0x08, 0x0f, 0x1a, 0x1d, 0x14, 0x13, 0x3e, 0x39, 0x30, 0x37, 0x22, 0x25, 0x2c, 0x2b, 
    0x96, 0x91, 0x98, 0x9f, 0x8a, 0x8d, 0x84, 0x83, 0xae, 0xa9, 0xa0, 0xa7, 0xb2, 0xb5, 0xbc, 0xbb, 
    0xe6, 0xe1, 0xe8, 0xef, 0xfa, 0xfd, 0xf4, 0xf3, 0xde, 0xd9, 0xd0, 0xd7, 0xc2, 0xc5, 0xcc, 0xcb,
  },
  {
    0x00, 0x08, 0x10, 0x18, 0x20, 0x28, 0x30, 0x38, 0x40, 0x48, 0x50, 0x58, 0x60, 0x68, 0x70, 0x78, 
    0x80, 0x88, 0x90, 0x98, 0xa0, 0xa8, 0xb0, 0xb8, 0xc0, 0xc8, 0xd0, 0xd8, 0xe0, 0xe8, 0xf0, 0xf8, 
    0x1b, 0x13, 0x0b, 0x03, 0x3b, 0x33, 0x2b, 0x23, 0x5b, 0x53, 0x4b, 0x43, 0x7b, 0x73, 0x6b, 0x63, 
    0x9b, 0x93, 0x8b, 0x83, 0xbb, 0xb3, 0xab, 0xa3, 0xdb, 0xd3, 0xcb, 0xc3, 0xfb, 0xf3, 0xeb, 0xe3, 
    0x36, 0x3e, 0x26, 0x2e, 0x16, 0x1e, 0x06, 0x0e, 0x76, 0x7e, 0x66, 0x6e, 0x56, 0x5e, 0x46, 0x4e, 
    0xb6, 0xbe, 0xa6, 0xae, 0x96, 0x9e, 0x86, 0x8e, 0xf6, 0xfe, 0xe6, 0xee, 0xd6, 0xde, 0xc6, 0xce, 
    0x2d, 0x25, 0x3d, 0x35, 0x0d, 0x05, 0x1d, 0x15, 0x6d, 0x65, 0x7d, 0x75, 0x4d, 0x45, 0x5d, 0x55, 
    0xad, 0xa5, 0xbd, 0xb5, 0x8d, 0x85, 0x9d, 0x95, 0xed, 0xe5, 0xfd, 0xf5, 0xcd, 0xc5, 0xdd, 0xd5, 
    0x6c, 0x64, 0x7c, 0x74, 0x4c, 0x44, 0x5c, 0x54, 0x2c, 0x24, 0x3c, 0x34, 0x0c, 0x04, 0x1c, 0x14, 
    0xec, 0xe4, 0xfc, 0xf4, 0xcc, 0xc4, 0xdc, 0xd4, 0xac, 0xa4, 0xbc, 0xb4, 0x8c, 0x84, 0x9c, 0x94, 
    0x77, 0x7f, 0x67, 0x6f, 0x57, 0x5f, 0x47, 0x4f, 0x37, 0x3f, 0x27, 0x2f, 0x17, 0x1f, 0x07, 0x0f, 
    0xf7, 0xff, 0xe7, 0xef, 0xd7, 0xdf, 0xc7, 0xcf, 0xb7, 0xbf, 0xa7, 0xaf, 0x97, 0x9f, 0x87, 0x8f, 
    0x5a, 0x52, 0x4a, 0x42, 0x7a, 0x72, 0x6a, 0x62, 0x1a, 0x12, 0x0a, 0x02, 0x3a, 0x32, 0x2a, 0x22, 
    0xda, 0xd2, 0xca, 0xc2, 0xfa, 0xf2, 0xea, 0xe2, 0x9a, 0x92, 0x8a, 0x82, 0xba, 0xb2, 0xaa, 0xa2, 
    0x41, 0x49, 0x51, 0x59, 0x61, 0x69, 0x71, 0x79, 0x01, 0x09, 0x11, 0x19, 0x21, 0x29, 0x31, 0x39, 
    0xc1, 0xc9, 0xd1, 0xd9, 0xe1, 0xe9, 0xf1, 0xf9, 0x81, 0x89, 0x91, 0x99, 0xa1, 0xa9, 0xb1, 0xb9,
  },
  {
    0x00, 0x09, 0x12, 0x1b, 0x24, 0x2d, 0x36, 0x3f, 0x48, 0x41, 0x5a, 0x53, 0x6c, 0x65, 0x7e, 0x77, 
    0x90, 0x99, 0x82, 0x8b, 0xb4, 0xbd, 0xa6, 0xaf, 0xd8, 0xd1, 0xca, 0xc3, 0xfc, 0xf5, 0xee, 0xe7, 
    0x3b, 0x32, 0x29, 0x20, 0x1f, 0x16, 0x0d, 0x04, 0x73, 0x7a, 0x61, 0x68, 0x57, 0x5e, 0x45, 0x4c, 
    0xab, 0xa2, 0xb9, 0xb0, 0x8f, 0x86, 0x9d, 0x94, 0xe3, 0xea, 0xf1, 0xf8, 0xc7, 0xce, 0xd5, 0xdc, 
    0x76, 0x7f, 0x64, 0x6d, 0x52, 0x5b, 0x40, 0x49, 0x3e, 0x37, 0x2c, 0x25, 0x1a, 0x13, 0x08, 0x01, 
    0xe6, 0xef, 0xf4, 0xfd, 0xc2, 0xcb, 0xd0, 0xd9, 0xae, 0xa7, 0xbc, 0xb5, 0x8a, 0x83, 0x98, 0x91, 
    0x4d, 0x44, 0x5f, 0x56, 0x69, 0x60, 0x7b, 0x72, 0x05, 0x0c, 0x17, 0x1e, 0x21, 0x28, 0x33, 0x3a, 
    0xdd, 0xd4, 0xcf, 0xc6, 0xf9, 0xf0, 0xeb, 0xe2, 0x95, 0x9c, 0x87, 0x8e, 0xb1, 0xb8, 0xa3, 0xaa, 
    0xec, 0xe5, 0xfe, 0xf7, 0xc8, 0xc1, 0xda, 0xd3, 0xa4, 0xad, 0xb6, 0xbf, 0x80, 0x89, 0x92, 0x9b, 
    0x7c, 0x75, 0x6e, 0x67, 0x58, 0x51, 0x4a, 0x43, 0x34, 0x3d, 0x26, 0x2f, 0x10, 0x19, 0x02, 0x0b, 
    0xd7, 0xde, 0xc5, 0xcc, 0xf3, 0xfa, 0xe1, 0xe8, 0x9f, 0x96, 0x8d, 0x84, 0xbb, 0xb2, 0xa9, 0xa0, 
    0x47, 0x4e, 0x55, 0x5c, 0x63, 0x6a, 0x71, 0x78, 0x0f, 0x06, 0x1d, 0x14, 0x2b, 0x22, 0x39, 0x30, 
    0x9a, 0x93, 0x88, 0x81, 0xbe, 0xb7, 0xac, 0xa5, 0xd2, 0xdb, 0xc0, 0xc9, 0xf6, 0xff, 0xe4, 0xed, 
    0x0a, 0x03, 0x18, 0x11, 0x2e, 0x27, 0x3c, 0x35, 0x42, 0x4b, 0x50, 0x59, 0x66, 0x6f, 0x74, 0x7d, 
    0xa1, 0xa8, 0xb3, 0xba, 0x85, 0x8c, 0x97, 0x9e, 0xe9, 0xe0, 0xfb, 0xf2, 0xcd, 0xc4, 0xdf, 0xd6, 
    0x31, 0x38, 0x23, 0x2a, 0x15, 0x1c, 0x07, 0x0e, 0x79, 0x70, 0x6b, 0x62, 0x5d, 0x54, 0x4f, 0x46,
  },
  {
    0x00, 0x0a, 0x14, 0x1e, 0x28, 0x22, 0x3c, 0x36, 0x50, 0x5a, 0x44, 0x4e, 0x78, 0x72, 0x6c, 0x66, 
    0xa0, 0xaa, 0xb4, 0xbe, 0x88, 0x82, 0x9c, 0x96, 0xf0, 0xfa, 0xe4, 0xee, 0xd8, 0xd2, 0xcc, 0xc6, 
    0x5b, 0x51, 0x4f, 0x45, 0x73, 0x79, 0x67, 0x6d, 0x0b, 0x01, 0x1f, 0x15, 0x23, 0x29, 0x37, 0x3d, 
    0xfb, 0xf1, 0xef, 0xe5, 0xd3, 0xd9, 0xc7, 0xcd, 0xab, 0xa1, 0xbf, 0xb5, 0x83, 0x89, 0x97, 0x9d, 
    0xb6, 0xbc, 0xa2, 0xa8, 0x9e, 0x94, 0x8a, 0x80, 0xe6, 0xec, 0xf2, 0xf8, 0xce, 0xc4, 0xda, 0xd0, 
    0x16, 0x1c, 0x02, 0x08, 0x3e, 0x34, 0x2a, 0x20, 0x46, 0x4c, 0x52, 0x58, 0x6e, 0x64, 0x7a, 0x70, 
    0xed, 0xe7, 0xf9, 0xf3, 0xc5, 0xcf, 0xd1, 0xdb, 0xbd, 0xb7, 0xa9, 0xa3, 0x95, 0x9f, 0x81, 0x8b, 
    0x4d, 0x47, 0x59, 0x53, 0x65, 0x6f, 0x71, 0x7b, 0x1d, 0x17, 0x09, 0x03, 0x35, 0x3f, 0x21, 0x2b, 
    0x77, 0x7d, 0x63, 0x69, 0x5f, 0x55, 0x4b, 0x41, 0x27, 0x2d, 0x33, 0x39, 0x0f, 0x05, 0x1b, 0x11, 
    0xd7, 0xdd, 0xc3, 0xc9, 0xff, 0xf5, 0xeb, 0xe1, 0x87, 0x8d, 0x93, 0x99, 0xaf, 0xa5, 0xbb, 0xb1, 
    0x2c, 0x26, 0x38, 0x32, 0x04, 0x0e, 0x10, 0x1a, 0x7c, 0x76, 0x68, 0x62, 0x54, 0x5e, 0x40, 0x4a, 
    0x8c, 0x86, 0x98, 0x92, 0xa4, 0xae, 0xb0, 0xba, 0xdc, 0xd6, 0xc8, 0xc2, 0xf4, 0xfe, 0xe0, 0xea, 
    0xc1, 0xcb, 0xd5, 0xdf, 0xe9, 0xe3, 0xfd, 0xf7, 0x91, 0x9b, 0x85, 0x8f, 0xb9, 0xb3, 0xad, 0xa7, 
    0x61, 0x6b, 0x75, 0x7f, 0x49, 0x43, 0x5d, 0x57, 0x31, 0x3b, 0x25, 0x2f, 0x19, 0x13, 0x0d, 0x07, 
    0x9a, 0x90, 0x8e, 0x84, 0xb2, 0xb8, 0xa6, 0xac, 0xca, 0xc0, 0xde, 0xd4, 0xe2, 0xe8, 0xf6, 0xfc, 
    0x3a, 0x30, 0x2e, 0x24, 0x12, 0x18, 0x06, 0x0c, 0x6a, 0x60, 0x7e, 0x74, 0x42, 0x48, 0x56, 0x5c,
  },
  {
    0x00, 0x0b, 0x16, 0x1d, 0x2c, 0x27, 0x3a, 0x31, 0x58, 0x53, 0x4e, 0x45, 0x74, 0x7f, 0x62, 0x69, 
    0xb0, 0xbb, 0xa6, 0xad, 0x9c, 0x97, 0x8a, 0x81, 0xe8, 0xe3, 0xfe, 0xf5, 0xc4, 0xcf, 0xd2, 0xd9, 
    0x7b, 0x70, 0x6d, 0x66, 0x57, 0x5c, 0x41, 0x4a, 0x23, 0x28, 0x35, 0x3e, 0x0f, 0x04, 0x19, 0x12, 
    0xcb, 0xc0, 0xdd, 0xd6, 0xe7, 0xec, 0xf1, 0xfa, 0x93, 0x98, 0x85, 0x8e, 0xbf, 0xb4, 0xa9, 0xa2, 
    0xf6, 0xfd, 0xe0, 0xeb, 0xda, 0xd1, 0xcc, 0xc7, 0xae, 0xa5, 0xb8, 0xb3, 0x82, 0x89, 0x94, 0x9f, 
    0x46, 0x4d, 0x50, 0x5b, 0x6a, 0x61, 0x7c, 0x77, 0x1e, 0x15, 0x08, 0x03, 0x32, 0x39, 0x24, 0x2f, 
    0x8d, 0x86, 0x9b, 0x90, 0xa1, 0xaa, 0xb7, 0xbc, 0xd5, 0xde, 0xc3, 0xc8, 0xf9, 0xf2, 0xef, 0xe4, 
    0x3d, 0x36, 0x2b, 0x20, 0x11, 0x1a, 0x07, 0x0c, 0x65, 0x6e, 0x73, 0x78, 0x49, 0x42, 0x5f, 0x54, 
    0xf7, 0xfc, 0xe1, 0xea, 0xdb, 0xd0, 0xcd, 0xc6, 0xaf, 0xa4, 0xb9, 0xb2, 0x83, 0x88, 0x95, 0x9e, 
    0x47, 0x4c, 0x51, 0x5a, 0x6b, 0x60, 0x7d, 0x76, 0x1f, 0x14, 0x09, 0x02, 0x33, 0x38, 0x25, 0x2e, 
    0x8c, 0x87, 0x9a, 0x91, 0xa0, 0xab, 0xb6, 0xbd, 0xd4, 0xdf, 0xc2, 0xc9, 0xf8, 0xf3, 0xee, 0xe5, 
    0x3c, 0x37, 0x2a, 0x21, 0x10, 0x1b, 0x06, 0x0d, 0x64, 0x6f, 0x72, 0x79, 0x48, 0x43, 0x5e, 0x55, 
    0x01, 0x0a, 0x17, 0x1c, 0x2d, 0x26, 0x3b, 0x30, 0x59, 0x52, 0x4f, 0x44, 0x75, 0x7e, 0x63, 0x68, 
    0xb1, 0xba, 0xa7, 0xac, 0x9d, 0x96, 0x8b, 0x80, 0xe9, 0xe2, 0xff, 0xf4, 0xc5, 0xce, 0xd3, 0xd8, 
    0x7a, 0x71, 0x6c, 0x67, 0x56, 0x5d, 0x40, 0x4b, 0x22, 0x29, 0x34, 0x3f, 0x0e, 0x05, 0x18, 0x13, 
    0xca, 0xc1, 0xdc, 0xd7, 0xe6, 0xed, 0xf0, 0xfb, 0x92, 0x99, 0x84, 0x8f, 0xbe, 0xb5, 0xa8, 0xa3,
  },
  {
    0x00, 0x0c, 0x18, 0x14, 0x30, 0x3c, 0x28, 0x24, 0x60, 0x6c, 0x78, 0x74, 0x50, 0x5c, 0x48, 0x44, 
    0xc0, 0xcc, 0xd8, 0xd4, 0xf0, 0xfc, 0xe8, 0xe4, 0xa0, 0xac, 0xb8, 0xb4, 0x90, 0x9c, 0x88, 0x84, 
    0x9b, 0x97, 0x83, 0x8f, 0xab, 0xa7, 0xb3, 0xbf, 0xfb, 0xf7, 0xe3, 0xef, 0xcb, 0xc7, 0xd3, 0xdf, 
    0x5b, 0x57, 0x43, 0x4f, 0x6b, 0x67, 0x73, 0x7f, 0x3b, 0x37, 0x23, 0x2f, 0x0b, 0x07, 0x13, 0x1f, 
    0x2d, 0x21, 0x35, 0x39, 0x1d, 0x11, 0x05, 0x09, 0x4d, 0x41, 0x55, 0x59, 0x7d, 0x71, 0x65, 0x69, 
    0xed, 0xe1, 0xf5, 0xf9, 0xdd, 0xd1, 0xc5, 0xc9, 0x8d, 0x81, 0x95, 0x99, 0xbd, 0xb1, 0xa5, 0xa9, 
    0xb6, 0xba, 0xae, 0xa2, 0x86, 0x8a, 0x9e, 0x92, 0xd6, 0xda, 0xce, 0xc2, 0xe6, 0xea, 0xfe, 0xf2, 
    0x76, 0x7a, 0x6e, 0x62, 0x46, 0x4a, 0x5e, 0x52, 0x16, 0x1a, 0x0e, 0x02, 0x26, 0x2a, 0x3e, 0x32, 
    0x5a, 0x56, 0x42, 0x4e, 0x6a, 0x66, 0x72, 0x7e, 0x3a, 0x36, 0x22, 0x2e, 0x0a, 0x06, 0x12, 0x1e, 
    0x9a, 0x96, 0x82, 0x8e, 0xaa, 0xa6, 0xb2, 0xbe, 0xfa, 0xf6, 0xe2, 0xee, 0xca, 0xc6, 0xd2, 0xde, 
    0xc1, 0xcd, 0xd9, 0xd5, 0xf1, 0xfd, 0xe9, 0xe5, 0xa1, 0xad, 0xb9, 0xb5, 0x91, 0x9d, 0x89, 0x85, 
    0x01, 0x0d, 0x19, 0x15, 0x31, 0x3d, 0x29, 0x25, 0x61, 0x6d, 0x79, 0x75, 0x51, 0x5d, 0x49, 0x45, 
    0x77, 0x7b, 0x6f, 0x63, 0x47, 0x4b, 0x5f, 0x53, 0x17, 0x1b, 0x0f, 0x03, 0x27, 0x2b, 0x3f, 0x33, 
    0xb7, 0xbb, 0xaf, 0xa3, 0x87, 0x8b, 0x9f, 0x93, 0xd7, 0xdb, 0xcf, 0xc3, 0xe7, 0xeb, 0xff, 0xf3, 
    0xec, 0xe0, 0xf4, 0xf8, 0xdc, 0xd0, 0xc4, 0xc8, 0x8c, 0x80, 0x94, 0x98, 0xbc, 0xb0, 0xa4, 0xa8, 
    0x2c, 0x20, 0x34, 0x38, 0x1c, 0x10, 0x04, 0x08, 0x4c, 0x40, 0x54, 0x58, 0x7c, 0x70, 0x64, 0x68,
  },
  {
    0x00, 0x0d, 0x1a, 0x17, 0x34, 0x39, 0x2e, 0x23, 0x68, 0x65, 0x72, 0x7f, 0x5c, 0x51, 0x46, 0x4b, 
    0xd0, 0xdd, 0xca, 0xc7, 0xe4, 0xe9, 0xfe, 0xf3, 0xb8, 0xb5, 0xa2, 0xaf, 0x8c, 0x81, 0x96, 0x9b, 
    0xbb, 0xb6, 0xa1, 0xac, 0x8f, 0x82, 0x95, 0x98, 0xd3, 0xde, 0xc9, 0xc4, 0xe7, 0xea, 0xfd, 0xf0, 
    0x6b, 0x66, 0x71, 0x7c, 0x5f, 0x52, 0x45, 0x48, 0x03, 0x0e, 0x19, 0x14, 0x37, 0x3a, 0x2d, 0x20, 
    0x6d, 0x60, 0x77, 0x7a, 0x59, 0x54, 0x43, 0x4e, 0x05, 0x08, 0x1f, 0x12, 0x31, 0x3c, 0x2b, 0x26, 
    0xbd, 0xb0, 0xa7, 0xaa, 0x89, 0x84, 0x93, 0x9e, 0xd5, 0xd8, 0xcf, 0xc2, 0xe1, 0xec, 0xfb, 0xf6, 
    0xd6, 0xdb, 0xcc, 0xc1, 0xe2, 0xef, 0xf8, 0xf5, 0xbe, 0xb3, 0xa4, 0xa9, 0x8a, 0x87, 0x90, 0x9d, 
    0x06, 0x0b, 0x1c, 0x11, 0x32, 0x3f, 0x28, 0x25, 0x6e, 0x63, 0x74, 0x79, 0x5a, 0x57, 0x40, 0x4d, 
    0xda, 0xd7, 0xc0, 0xcd, 0xee, 0xe3, 0xf4, 0xf9, 0xb2, 0xbf, 0xa8, 0xa5, 0x86, 0x8b, 0x9c, 0x91, 
    0x0a, 0x07, 0x10, 0x1d, 0x3e, 0x33, 0x24, 0x29, 0x62, 0x6f, 0x78, 0x75, 0x56, 0x5b, 0x4c, 0x41, 
    0x61, 0x6c, 0x7b, 0x76, 0x55, 0x58, 0x4f, 0x42, 0x09, 0x04, 0x13, 0x1e, 0x3d, 0x30, 0x27, 0x2a, 
    0xb1, 0xbc, 0xab, 0xa6, 0x85, 0x88, 0x9f, 0x92, 0xd9, 0xd4, 0xc3, 0xce, 0xed, 0xe0, 0xf7, 0xfa, 
    0xb7, 0xba, 0xad, 0xa0, 0x83, 0x8e, 0x99, 0x94, 0xdf, 0xd2, 0xc5, 0xc8, 0xeb, 0xe6, 0xf1, 0xfc, 
    0x67, 0x6a, 0x7d, 0x70, 0x53, 0x5e, 0x49, 0x44, 0x0f, 0x02, 0x15, 0x18, 0x3b, 0x36, 0x21, 0x2c, 
    0x0c, 0x01, 0x16, 0x1b, 0x38, 0x35, 0x22, 0x2f, 0x64, 0x69, 0x7e, 0x73, 0x50, 0x5d, 0x4a, 0x47, 
    0xdc, 0xd1, 0xc6, 0xcb, 0xe8, 0xe5, 0xf2, 0xff, 0xb4, 0xb9, 0xae, 0xa3, 0x80, 0x8d, 0x9a, 0x97,
  },
  {
    0x00, 0x0e, 0x1c, 0x12, 0x38, 0x36, 0x24, 0x2a, 0x70, 0x7e, 0x6c, 0x62, 0x48, 0x46, 0x54, 0x5a, 
    0xe0, 0xee, 0xfc, 0xf2, 0xd8, 0xd6, 0xc4, 0xca, 0x90, 0x9e, 0x8c, 0x82, 0xa8, 0xa6, 0xb4, 0xba, 
    0xdb, 0xd5, 0xc7, 0xc9, 0xe3, 0xed, 0xff, 0xf1, 0xab, 0xa5, 0xb7, 0xb9, 0x93, 0x9d, 0x8f, 0x81, 
    0x3b, 0x35, 0x27, 0x29, 0x03, 0x0d, 0x1f, 0x11, 0x4b, 0x45, 0x57, 0x59, 0x73, 0x7d, 0x6f, 0x61, 
    0xad, 0xa3, 0xb1, 0xbf, 0x95, 0x9b, 0x89, 0x87, 0xdd, 0xd3, 0xc1, 0xcf, 0xe5, 0xeb, 0xf9, 0xf7, 
    0x4d, 0x43, 0x51, 0x5f, 0x75, 0x7b, 0x69, 0x67, 0x3d, 0x33, 0x21, 0x2f, 0x05, 0x0b, 0x19, 0x17, 
    0x76, 0x78, 0x6a, 0x64, 0x4e, 0x40, 0x52, 0x5c, 0x06, 0x08, 0x1a, 0x14, 0x3e, 0x30, 0x22, 0x2c, 
    0x96, 0x98, 0x8a, 0x84, 0xae, 0xa0, 0xb2, 0xbc, 0xe6, 0xe8, 0xfa, 0xf4, 0xde, 0xd0, 0xc2, 0xcc, 
    0x41, 0x4f, 0x5d, 0x53, 0x79, 0x77, 0x65, 0x6b, 0x31, 0x3f, 0x2d, 0x23, 0x09, 0x07, 0x15, 0x1b, 
    0xa1, 0xaf, 0xbd, 0xb3, 0x99, 0x97, 0x85, 0x8b, 0xd1, 0xdf, 0xcd, 0xc3, 0xe9, 0xe7, 0xf5, 0xfb, 
    0x9a, 0x94, 0x86, 0x88, 0xa2, 0xac, 0xbe, 0xb0, 0xea, 0xe4, 0xf6, 0xf8, 0xd2, 0xdc, 0xce, 0xc0, 
    0x7a, 0x74, 0x66, 0x68, 0x42, 0x4c, 0x5e, 0x50, 0x0a, 0x04, 0x16, 0x18, 0x32, 0x3c, 0x2e, 0x20, 
    0xec, 0xe2, 0xf0, 0xfe, 0xd4, 0xda, 0xc8, 0xc6, 0x9c, 0x92, 0x80, 0x8e, 0xa4, 0xaa, 0xb8, 0xb6, 
    0x0c, 0x02, 0x10, 0x1e, 0x34, 0x3a, 0x28, 0x26, 0x7c, 0x72, 0x60, 0x6e, 0x44, 0x4a, 0x58, 0x56, 
    0x37, 0x39, 0x2b, 0x25, 0x0f, 0x01, 0x13, 0x1d, 0x47, 0x49, 0x5b, 0x55, 0x7f, 0x71, 0x63, 0x6d, 
    0xd7, 0xd9, 0xcb, 0xc5, 0xef, 0xe1, 0xf3, 0xfd, 0xa7, 0xa9, 0xbb, 0xb5, 0x9f, 0x91, 0x83, 0x8d,
  }
};

aes::~aes() {
  memset(&subkeys_, 0xcc, sizeof(subkeys_));
  memset(&encskeys_, 0xcc, sizeof(encskeys_));
  memset(&decskeys_, 0xcc, sizeof(decskeys_));
}

int32_t aes::initialize(const uint16_t mode, const uint8_t *key, const uint64_t klen, bool enable_intrinsic) {
  union_array_u256_t karray = {0};

  if (AES128 != (mode & EXTRACT_TYPE) &&
      AES192 != (mode & EXTRACT_TYPE) &&
      AES256 != (mode & EXTRACT_TYPE)) {
    return FAILURE;
  }

  mode_ = mode;
  enable_intrinsic_func_ = enable_intrinsic;

  switch (((mode_ & EXTRACT_TYPE) >> 8)) {
    case (AES128 >> 8):
      if (AES128_KEY_BYTE_SIZE != klen) { return FAILURE; }
      nr_ = AES128_ROUNDS;
      nk_ = AES128_KEY_CONV_SIZE;

      for (uint32_t i = 0; i < 16; ++i) { 
        karray.u8[i] = key[i]; 
      }
      expand_key(karray, subkeys_);
      has_subkeys_ = true;
      break;
    case (AES192 >> 8):
      if (AES192_KEY_BYTE_SIZE != klen) { return FAILURE; }
      nr_ = AES192_ROUNDS;
      nk_ = AES192_KEY_CONV_SIZE;

      for (uint32_t i = 0; i < 24; ++i) { 
        karray.u8[i] = key[i]; 
      }
      expand_key(karray, subkeys_);
      has_subkeys_ = true;
      break;
    case (AES256 >> 8):
      if (AES256_KEY_BYTE_SIZE != klen) { return FAILURE; }
      nr_ = AES256_ROUNDS;
      nk_ = AES256_KEY_CONV_SIZE;

      for (uint32_t i = 0; i < 32; ++i) { 
        karray.u8[i] = key[i]; 
      }
      expand_key(karray, subkeys_);
      has_subkeys_ = true;
      break;
    default:
      break;
  }

  /* Clear stack data. */
  memset(&karray, 0xcc, sizeof(karray));

  /* TODO: Implement Key Expansion using SSE2 and AES-NI. */
  if (true == enable_intrinsic_func_) {
    for (uint32_t r = 0; r < nr_ + 1; ++r) {
      uint32_t ALIGNAS(32) tmpkey[4] = {0}; 

      tmpkey[0] = subkeys_[(4 * r)];
      tmpkey[1] = subkeys_[(4 * r) + 1];
      tmpkey[2] = subkeys_[(4 * r) + 2];
      tmpkey[3] = subkeys_[(4 * r) + 3];

      if (0 == r || nr_ == r) {
        encskeys_[r] = _mm_loadu_si128((__m128i*)tmpkey); 
        decskeys_[r] = _mm_loadu_si128((__m128i*)tmpkey); 
      } else {
        encskeys_[r] = _mm_loadu_si128((__m128i*)tmpkey); 
        decskeys_[r] = _mm_aesimc_si128(encskeys_[r]); 
      }
    }
  }
  return SUCCESS;
}

int32_t aes::encrypt(const uint8_t * const ptext, const uint64_t plen, uint8_t *ctext, const uint64_t clen) {
  if (16 != plen || 16 != clen) { return FAILURE; }
  if (true == enable_intrinsic_func_) {
    intrinsic_encrypt(ptext, ctext);
  } else {
    no_intrinsic_encrypt(ptext, ctext);
  }
  return SUCCESS;
}

int32_t aes::decrypt(const uint8_t * const ctext, const uint64_t clen, uint8_t *ptext, const uint64_t plen) {
  if (16 != plen || 16 != clen) { return FAILURE; }
  if (true == enable_intrinsic_func_) {
    intrinsic_decrypt(ctext, ptext);
  } else {
    no_intrinsic_decrypt(ctext, ptext);
  }
  return SUCCESS;
}

void aes::clear() {
  mode_ = AES256;
  nr_ = 0;
  nk_ = 0;
  has_subkeys_ = false;
  enable_intrinsic_func_ = false;

  memset(&subkeys_, 0xcc, sizeof(subkeys_));
  memset(&encskeys_, 0xcc, sizeof(encskeys_));
  memset(&decskeys_, 0xcc, sizeof(decskeys_));
}


#ifdef ENABLE_FUNCTIONS_FOR_GTEST
std::vector<uint8_t> aes::get_subkeys_for_unit_test() {
  std::vector<uint8_t> skeys;

  for (uint64_t cnt = 0; cnt < sizeof(subkeys_) / sizeof(uint32_t); ++cnt) {
    union_array_u32_t skey32bit = {0};

    skey32bit.u32 = subkeys_[cnt];
    skeys.push_back(skey32bit.u8[0]);
    skeys.push_back(skey32bit.u8[1]);
    skeys.push_back(skey32bit.u8[2]);
    skeys.push_back(skey32bit.u8[3]);
  }
  return skeys;
}

std::vector<uint8_t> aes::get_encskeys_for_unit_test() {
  std::vector<uint8_t> skeys;

  for (uint64_t i = 0; i < sizeof(encskeys_) / sizeof(__m128i); ++i) {
    for (uint64_t j = 0; j < 16; ++j) {
      skeys.push_back((uint8_t)(encskeys_[i]).m128i_i8[j]);
    }
  }
  return skeys;
}
#endif

inline void aes::no_intrinsic_encrypt(const uint8_t * const ptext, uint8_t *ctext) const noexcept {
  const uint32_t nr = nr_;
  union_array_u128_t tmppln = {0};

  for (uint32_t i = 0; i < 16; ++i) {
    tmppln.u8[i] = ptext[i];
  }

  add_round_key(0, &tmppln);

  for (uint32_t round = 1; round < nr; ++round) {
    sub_bytes(&tmppln);
    shift_rows(&tmppln);
    mix_columns(&tmppln);
    add_round_key(round, &tmppln);
  }

  sub_bytes(&tmppln);
  shift_rows(&tmppln);
  add_round_key(nr, &tmppln);

  for (uint32_t i = 0; i < 16; ++i) {
    ctext[i] = tmppln.u8[i];
  }
}

inline void aes::no_intrinsic_decrypt(const uint8_t * const ctext, uint8_t *ptext) const noexcept {
  const uint32_t nr = nr_;
  union_array_u128_t tmpcphr = {0};

  for (uint32_t i = 0; i < 16; ++i) {
    tmpcphr.u8[i] = ctext[i];
  }

  add_round_key(nr, &tmpcphr);

  for (uint32_t round = nr - 1; round > 0; --round) {
    inv_shift_rows(&tmpcphr);
    inv_sub_bytes(&tmpcphr);
    add_round_key(round, &tmpcphr);
    inv_mix_columns(&tmpcphr);
  }

  inv_shift_rows(&tmpcphr);
  inv_sub_bytes(&tmpcphr);
  add_round_key(0, &tmpcphr);

  for (uint32_t i = 0; i < 16; ++i) {
    ptext[i] = tmpcphr.u8[i];
  }
}

inline void aes::intrinsic_encrypt(const uint8_t * const ptext, uint8_t *ctext) const noexcept { 
  const uint32_t nr = nr_;

  __m128i st = _mm_loadu_si128((__m128i*)ptext);
  st = _mm_xor_si128(st, encskeys_[0]);

  for (uint32_t round = 1; round < nr; ++round) {
    st = _mm_aesenc_si128(st, encskeys_[round]);
  }
  _mm_storeu_si128((__m128i*)ctext, _mm_aesenclast_si128(st, encskeys_[nr]));
}

inline void aes::intrinsic_decrypt(const uint8_t * const ctext, uint8_t *ptext) const noexcept {
  const uint32_t nr = nr_;

  __m128i st = _mm_loadu_si128((__m128i*)ctext);
  st = _mm_xor_si128(st, decskeys_[nr]);

  for (uint32_t round = nr - 1; round > 0; --round) {
    st = _mm_aesdec_si128(st, decskeys_[round]);
  }
  _mm_storeu_si128((__m128i*)ptext, _mm_aesdeclast_si128(st, decskeys_[0]));
}

inline void aes::expand_key(const union_array_u256_t key, uint32_t *subkeys) const noexcept {
  const uint32_t nk = nk_; /* Cache member variables in local variables. */
  const uint32_t nr = nr_;
  const uint32_t nkr = 4 * (nr + 1);
  uint32_t tmp = 0;

  for (uint32_t i = 0; i < nk; ++i) {
    subkeys[i] = key.u32[i];
  }

  for (uint32_t j = nk; j < nkr; ++j) {
    tmp = subkeys[j - 1];

    if (0 == (j % nk)) {
      tmp = sub_word(rot_word(tmp)) ^ rcon[j / nk];

    } else if (nk > 6 && 4 == (j % nk)) {
      tmp = sub_word(tmp);

    }
    subkeys[j] = subkeys[j - nk] ^ tmp;
  }
}

inline uint32_t aes::rot_word(const uint32_t word) const noexcept {
  union_array_u32_t in  = {word};
  union_array_u32_t out = {0};

  out.u8[0] = in.u8[1];
  out.u8[1] = in.u8[2];
  out.u8[2] = in.u8[3];
  out.u8[3] = in.u8[0];

  return out.u32;
}

inline uint32_t aes::sub_word(const uint32_t word) const noexcept {
  union_array_u32_t in  = {word};
  union_array_u32_t out = {0};

  out.u8[0] = sbox[in.u8[0]];
  out.u8[1] = sbox[in.u8[1]];
  out.u8[2] = sbox[in.u8[2]];
  out.u8[3] = sbox[in.u8[3]];

  return out.u32;
}

inline void aes::sub_bytes(union_array_u128_t *words) const noexcept {
  for (uint32_t i = 0; i < 16; i +=4) {
    words->u8[i]     = sbox[words->u8[i]];
    words->u8[i + 1] = sbox[words->u8[i + 1]];
    words->u8[i + 2] = sbox[words->u8[i + 2]];
    words->u8[i + 3] = sbox[words->u8[i + 3]];
  }
}

inline void aes::inv_sub_bytes(union_array_u128_t *words) const noexcept {
  for (uint32_t i = 0; i < 16; i +=4) {
    words->u8[i]     = invsbox[words->u8[i]];
    words->u8[i + 1] = invsbox[words->u8[i + 1]];
    words->u8[i + 2] = invsbox[words->u8[i + 2]];
    words->u8[i + 3] = invsbox[words->u8[i + 3]];
  }
}

inline void aes::shift_rows(union_array_u128_t *words) const noexcept {
  union_array_u128_t tmp = *words;

  words->u8[1]  = tmp.u8[5];
  words->u8[5]  = tmp.u8[9];
  words->u8[9]  = tmp.u8[13];
  words->u8[13] = tmp.u8[1];

  words->u8[2]  = tmp.u8[10];
  words->u8[6]  = tmp.u8[14];
  words->u8[10] = tmp.u8[2];
  words->u8[14] = tmp.u8[6];

  words->u8[3]  = tmp.u8[15];
  words->u8[7]  = tmp.u8[3];
  words->u8[11] = tmp.u8[7];
  words->u8[15] = tmp.u8[11];
}

inline void aes::inv_shift_rows(union_array_u128_t *words) const noexcept {
  union_array_u128_t tmp = *words;

  words->u8[1]  = tmp.u8[13];
  words->u8[5]  = tmp.u8[1];
  words->u8[9]  = tmp.u8[5];
  words->u8[13] = tmp.u8[9];

  words->u8[2]  = tmp.u8[10];
  words->u8[6]  = tmp.u8[14];
  words->u8[10] = tmp.u8[2];
  words->u8[14] = tmp.u8[6];

  words->u8[3]  = tmp.u8[7];
  words->u8[7]  = tmp.u8[11];
  words->u8[11] = tmp.u8[15];
  words->u8[15] = tmp.u8[3];
}

inline void aes::mix_columns(union_array_u128_t *words) const noexcept {
  union_array_u128_t tmp = {0};
  
  /* Line 1 */
  tmp.u8[0]  = gf_mult(0x02, words->u8[0]) ^ gf_mult(0x03, words->u8[1])   ^               words->u8[2]   ^               words->u8[3];
  tmp.u8[1]  =               words->u8[0]  ^ gf_mult(0x02, words->u8[1])   ^ gf_mult(0x03, words->u8[2])  ^               words->u8[3];
  tmp.u8[2]  =               words->u8[0]  ^               words->u8[1]    ^ gf_mult(0x02, words->u8[2])  ^ gf_mult(0x03, words->u8[3]);
  tmp.u8[3]  = gf_mult(0x03, words->u8[0]) ^               words->u8[1]    ^               words->u8[2]   ^ gf_mult(0x02, words->u8[3]);
                                                                                                                
  /* Line 2 */                                                                                                  
  tmp.u8[4]  = gf_mult(0x02, words->u8[4]) ^ gf_mult(0x03, words->u8[5])   ^               words->u8[6]   ^               words->u8[7];
  tmp.u8[5]  =               words->u8[4]  ^ gf_mult(0x02, words->u8[5])   ^ gf_mult(0x03, words->u8[6])  ^               words->u8[7];
  tmp.u8[6]  =               words->u8[4]  ^               words->u8[5]    ^ gf_mult(0x02, words->u8[6])  ^ gf_mult(0x03, words->u8[7]);
  tmp.u8[7]  = gf_mult(0x03, words->u8[4]) ^               words->u8[5]    ^               words->u8[6]   ^ gf_mult(0x02, words->u8[7]);
                                                                                 
  /* Line 3 */                                                                   
  tmp.u8[8]  = gf_mult(0x02, words->u8[8]) ^ gf_mult(0x03, words->u8[9])   ^               words->u8[10]  ^               words->u8[11];
  tmp.u8[9]  =               words->u8[8]  ^ gf_mult(0x02, words->u8[9])   ^ gf_mult(0x03, words->u8[10]) ^               words->u8[11];
  tmp.u8[10] =               words->u8[8]  ^               words->u8[9]    ^ gf_mult(0x02, words->u8[10]) ^ gf_mult(0x03, words->u8[11]);
  tmp.u8[11] = gf_mult(0x03, words->u8[8]) ^               words->u8[9]    ^               words->u8[10]  ^ gf_mult(0x02, words->u8[11]);

  /* Line 4 */
  tmp.u8[12] = gf_mult(0x02, words->u8[12]) ^ gf_mult(0x03, words->u8[13]) ^               words->u8[14]  ^               words->u8[15];
  tmp.u8[13] =               words->u8[12]  ^ gf_mult(0x02, words->u8[13]) ^ gf_mult(0x03, words->u8[14]) ^               words->u8[15];
  tmp.u8[14] =               words->u8[12]  ^               words->u8[13]  ^ gf_mult(0x02, words->u8[14]) ^ gf_mult(0x03, words->u8[15]);
  tmp.u8[15] = gf_mult(0x03, words->u8[12]) ^               words->u8[13]  ^               words->u8[14]  ^ gf_mult(0x02, words->u8[15]);

  words->u32[0] = tmp.u32[0];
  words->u32[1] = tmp.u32[1];
  words->u32[2] = tmp.u32[2];
  words->u32[3] = tmp.u32[3];
}

inline void aes::inv_mix_columns(union_array_u128_t *words) const noexcept {
  union_array_u128_t tmp = {0};

  /* Line 1 */
  tmp.u8[0]  = gf_mult(0x0e, words->u8[0])  ^ gf_mult(0x0b, words->u8[1])  ^ gf_mult(0x0d, words->u8[2])  ^ gf_mult(0x09, words->u8[3]);
  tmp.u8[1]  = gf_mult(0x09, words->u8[0])  ^ gf_mult(0x0e, words->u8[1])  ^ gf_mult(0x0b, words->u8[2])  ^ gf_mult(0x0d, words->u8[3]);
  tmp.u8[2]  = gf_mult(0x0d, words->u8[0])  ^ gf_mult(0x09, words->u8[1])  ^ gf_mult(0x0e, words->u8[2])  ^ gf_mult(0x0b, words->u8[3]);
  tmp.u8[3]  = gf_mult(0x0b, words->u8[0])  ^ gf_mult(0x0d, words->u8[1])  ^ gf_mult(0x09, words->u8[2])  ^ gf_mult(0x0e, words->u8[3]);
                                                                                                         
  /* Line 2 */                                                                                           
  tmp.u8[4]  = gf_mult(0x0e, words->u8[4])  ^ gf_mult(0x0b, words->u8[5])  ^ gf_mult(0x0d, words->u8[6])  ^ gf_mult(0x09, words->u8[7]);
  tmp.u8[5]  = gf_mult(0x09, words->u8[4])  ^ gf_mult(0x0e, words->u8[5])  ^ gf_mult(0x0b, words->u8[6])  ^ gf_mult(0x0d, words->u8[7]);
  tmp.u8[6]  = gf_mult(0x0d, words->u8[4])  ^ gf_mult(0x09, words->u8[5])  ^ gf_mult(0x0e, words->u8[6])  ^ gf_mult(0x0b, words->u8[7]);
  tmp.u8[7]  = gf_mult(0x0b, words->u8[4])  ^ gf_mult(0x0d, words->u8[5])  ^ gf_mult(0x09, words->u8[6])  ^ gf_mult(0x0e, words->u8[7]);
                                                                           
  /* Line 3 */                                                             
  tmp.u8[8]  = gf_mult(0x0e, words->u8[8])  ^ gf_mult(0x0b, words->u8[9])  ^ gf_mult(0x0d, words->u8[10]) ^ gf_mult(0x09, words->u8[11]);
  tmp.u8[9]  = gf_mult(0x09, words->u8[8])  ^ gf_mult(0x0e, words->u8[9])  ^ gf_mult(0x0b, words->u8[10]) ^ gf_mult(0x0d, words->u8[11]);
  tmp.u8[10] = gf_mult(0x0d, words->u8[8])  ^ gf_mult(0x09, words->u8[9])  ^ gf_mult(0x0e, words->u8[10]) ^ gf_mult(0x0b, words->u8[11]);
  tmp.u8[11] = gf_mult(0x0b, words->u8[8])  ^ gf_mult(0x0d, words->u8[9])  ^ gf_mult(0x09, words->u8[10]) ^ gf_mult(0x0e, words->u8[11]);

  /* Line 4 */
  tmp.u8[12] = gf_mult(0x0e, words->u8[12]) ^ gf_mult(0x0b, words->u8[13]) ^ gf_mult(0x0d, words->u8[14]) ^ gf_mult(0x09, words->u8[15]);
  tmp.u8[13] = gf_mult(0x09, words->u8[12]) ^ gf_mult(0x0e, words->u8[13]) ^ gf_mult(0x0b, words->u8[14]) ^ gf_mult(0x0d, words->u8[15]);
  tmp.u8[14] = gf_mult(0x0d, words->u8[12]) ^ gf_mult(0x09, words->u8[13]) ^ gf_mult(0x0e, words->u8[14]) ^ gf_mult(0x0b, words->u8[15]);
  tmp.u8[15] = gf_mult(0x0b, words->u8[12]) ^ gf_mult(0x0d, words->u8[13]) ^ gf_mult(0x09, words->u8[14]) ^ gf_mult(0x0e, words->u8[15]);

  words->u32[0] = tmp.u32[0];
  words->u32[1] = tmp.u32[1];
  words->u32[2] = tmp.u32[2];
  words->u32[3] = tmp.u32[3];
}


inline void aes::add_round_key(const uint32_t nr, union_array_u128_t *word) const noexcept {
  const uint32_t kpos = 4 * nr;

  word->u32[0] = word->u32[0] ^ subkeys_[kpos    ];
  word->u32[1] = word->u32[1] ^ subkeys_[kpos + 1];
  word->u32[2] = word->u32[2] ^ subkeys_[kpos + 2];
  word->u32[3] = word->u32[3] ^ subkeys_[kpos + 3];
}

inline uint8_t aes::gf_mult(uint8_t x, uint8_t y) const noexcept {
  return lut_gf_mult[x][y];
}

#if 0
inline uint8_t aes::gf_mult(uint8_t x, uint8_t y) const noexcept {
  uint8_t result = 0;
  uint8_t mask = 0x01;

  while (0x00 != mask) {
    if (0x00 != (y & mask)) {
      result ^= x;
    }
    x = (x << 1) ^ ((0x00 != (x & 0x80)) ? 0x1b : 0x00);
    mask <<= 1;
  }
  return result;
}
#endif

}