/*!
* cryptography library
*
* Copyright (c) 2022 tako
*
* This software is released under the MIT license.
* see https://opensource.org/licenses/MIT
*/

#include "seed.h"
#include "bit_utill.h"
#include "byte_utill.h"

namespace cryptography {

#define SUCCESS                                             0
#define FAILURE                                             1

#define SEED_ROUNDS                                         16
                                                            
#define M0                                                  0xFC
#define M1                                                  0xF3
#define M2                                                  0xCF
#define M3                                                  0x3F

#define SEED_BIGENDIAN_U64_TO_U32_COPY(value, outval)       value  = _byteswap_uint64(value);  \
                                                            memcpy(outval, &value, 8);
                           
#define SEED_BIGENDIAN_U32_TO_U64_COPY(value, outval)       memcpy(&outval, value, 8);  \
                                                            outval = _byteswap_uint64(outval);

static const uint32_t kc[16] = {
  0x9E3779B9, 0x3C6EF373, 0x78DDE6E6, 0xF1BBCDCC, 
  0xE3779B99, 0xC6EF3733, 0x8DDE6E67, 0x1BBCDCCF, 
  0x3779B99E, 0x6EF3733C, 0xDDE6E678, 0xBBCDCCF1, 
  0x779B99E3, 0xEF3733C6, 0xDE6E678D, 0xBCDCCF1B, 
};

static const uint8_t sbox0[] = {
  0xA9, 0x85, 0xD6, 0xD3, 0x54, 0x1D, 0xAC, 0x25, 
  0x5D, 0x43, 0x18, 0x1E, 0x51, 0xFC, 0xCA, 0x63, 
  0x28, 0x44, 0x20, 0x9D, 0xE0, 0xE2, 0xC8, 0x17, 
  0xA5, 0x8F, 0x03, 0x7B, 0xBB, 0x13, 0xD2, 0xEE, 
  0x70, 0x8C, 0x3F, 0xA8, 0x32, 0xDD, 0xF6, 0x74, 
  0xEC, 0x95, 0x0B, 0x57, 0x5C, 0x5B, 0xBD, 0x01, 
  0x24, 0x1C, 0x73, 0x98, 0x10, 0xCC, 0xF2, 0xD9, 
  0x2C, 0xE7, 0x72, 0x83, 0x9B, 0xD1, 0x86, 0xC9, 
  0x60, 0x50, 0xA3, 0xEB, 0x0D, 0xB6, 0x9E, 0x4F, 
  0xB7, 0x5A, 0xC6, 0x78, 0xA6, 0x12, 0xAF, 0xD5, 
  0x61, 0xC3, 0xB4, 0x41, 0x52, 0x7D, 0x8D, 0x08, 
  0x1F, 0x99, 0x00, 0x19, 0x04, 0x53, 0xF7, 0xE1, 
  0xFD, 0x76, 0x2F, 0x27, 0xB0, 0x8B, 0x0E, 0xAB, 
  0xA2, 0x6E, 0x93, 0x4D, 0x69, 0x7C, 0x09, 0x0A, 
  0xBF, 0xEF, 0xF3, 0xC5, 0x87, 0x14, 0xFE, 0x64, 
  0xDE, 0x2E, 0x4B, 0x1A, 0x06, 0x21, 0x6B, 0x66, 
  0x02, 0xF5, 0x92, 0x8A, 0x0C, 0xB3, 0x7E, 0xD0, 
  0x7A, 0x47, 0x96, 0xE5, 0x26, 0x80, 0xAD, 0xDF, 
  0xA1, 0x30, 0x37, 0xAE, 0x36, 0x15, 0x22, 0x38, 
  0xF4, 0xA7, 0x45, 0x4C, 0x81, 0xE9, 0x84, 0x97, 
  0x35, 0xCB, 0xCE, 0x3C, 0x71, 0x11, 0xC7, 0x89, 
  0x75, 0xFB, 0xDA, 0xF8, 0x94, 0x59, 0x82, 0xC4, 
  0xFF, 0x49, 0x39, 0x67, 0xC0, 0xCF, 0xD7, 0xB8, 
  0x0F, 0x8E, 0x42, 0x23, 0x91, 0x6C, 0xDB, 0xA4, 
  0x34, 0xF1, 0x48, 0xC2, 0x6F, 0x3D, 0x2D, 0x40, 
  0xBE, 0x3E, 0xBC, 0xC1, 0xAA, 0xBA, 0x4E, 0x55, 
  0x3B, 0xDC, 0x68, 0x7F, 0x9C, 0xD8, 0x4A, 0x56, 
  0x77, 0xA0, 0xED, 0x46, 0xB5, 0x2B, 0x65, 0xFA, 
  0xE3, 0xB9, 0xB1, 0x9F, 0x5E, 0xF9, 0xE6, 0xB2, 
  0x31, 0xEA, 0x6D, 0x5F, 0xE4, 0xF0, 0xCD, 0x88, 
  0x16, 0x3A, 0x58, 0xD4, 0x62, 0x29, 0x07, 0x33, 
  0xE8, 0x1B, 0x05, 0x79, 0x90, 0x6A, 0x2A, 0x9A,
};

static const uint8_t sbox1[256] = {
  0x38, 0xE8, 0x2D, 0xA6, 0xCF, 0xDE, 0xB3, 0xB8, 
  0xAF, 0x60, 0x55, 0xC7, 0x44, 0x6F, 0x6B, 0x5B, 
  0xC3, 0x62, 0x33, 0xB5, 0x29, 0xA0, 0xE2, 0xA7, 
  0xD3, 0x91, 0x11, 0x06, 0x1C, 0xBC, 0x36, 0x4B, 
  0xEF, 0x88, 0x6C, 0xA8, 0x17, 0xC4, 0x16, 0xF4, 
  0xC2, 0x45, 0xE1, 0xD6, 0x3F, 0x3D, 0x8E, 0x98, 
  0x28, 0x4E, 0xF6, 0x3E, 0xA5, 0xF9, 0x0D, 0xDF, 
  0xD8, 0x2B, 0x66, 0x7A, 0x27, 0x2F, 0xF1, 0x72, 
  0x42, 0xD4, 0x41, 0xC0, 0x73, 0x67, 0xAC, 0x8B, 
  0xF7, 0xAD, 0x80, 0x1F, 0xCA, 0x2C, 0xAA, 0x34, 
  0xD2, 0x0B, 0xEE, 0xE9, 0x5D, 0x94, 0x18, 0xF8, 
  0x57, 0xAE, 0x08, 0xC5, 0x13, 0xCD, 0x86, 0xB9, 
  0xFF, 0x7D, 0xC1, 0x31, 0xF5, 0x8A, 0x6A, 0xB1, 
  0xD1, 0x20, 0xD7, 0x02, 0x22, 0x04, 0x68, 0x71, 
  0x07, 0xDB, 0x9D, 0x99, 0x61, 0xBE, 0xE6, 0x59, 
  0xDD, 0x51, 0x90, 0xDC, 0x9A, 0xA3, 0xAB, 0xD0, 
  0x81, 0x0F, 0x47, 0x1A, 0xE3, 0xEC, 0x8D, 0xBF, 
  0x96, 0x7B, 0x5C, 0xA2, 0xA1, 0x63, 0x23, 0x4D, 
  0xC8, 0x9E, 0x9C, 0x3A, 0x0C, 0x2E, 0xBA, 0x6E, 
  0x9F, 0x5A, 0xF2, 0x92, 0xF3, 0x49, 0x78, 0xCC, 
  0x15, 0xFB, 0x70, 0x75, 0x7F, 0x35, 0x10, 0x03, 
  0x64, 0x6D, 0xC6, 0x74, 0xD5, 0xB4, 0xEA, 0x09, 
  0x76, 0x19, 0xFE, 0x40, 0x12, 0xE0, 0xBD, 0x05, 
  0xFA, 0x01, 0xF0, 0x2A, 0x5E, 0xA9, 0x56, 0x43, 
  0x85, 0x14, 0x89, 0x9B, 0xB0, 0xE5, 0x48, 0x79, 
  0x97, 0xFC, 0x1E, 0x82, 0x21, 0x8C, 0x1B, 0x5F, 
  0x77, 0x54, 0xB2, 0x1D, 0x25, 0x4F, 0x00, 0x46, 
  0xED, 0x58, 0x52, 0xEB, 0x7E, 0xDA, 0xC9, 0xFD, 
  0x30, 0x95, 0x65, 0x3C, 0xB6, 0xE4, 0xBB, 0x7C, 
  0x0E, 0x50, 0x39, 0x26, 0x32, 0x84, 0x69, 0x93, 
  0x37, 0xE7, 0x24, 0xA4, 0xCB, 0x53, 0x0A, 0x87, 
  0xD9, 0x4C, 0x83, 0x8F, 0xCE, 0x3B, 0x4A, 0xB7,
};

static const uint32_t key_round_schd[16] = {
  1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0,
};

int32_t seed::initialize(const uint32_t mode, const uint8_t *key, const uint32_t klen, bool enable_intrinsic) noexcept {
  uint64_t k[2] = {0};

  if (SEED != (mode & EXTRACT_TYPE)) {
    return FAILURE;
  }

  mode_ = mode;
  enable_intrinsic_func_ = enable_intrinsic;

  if (16 != klen) { return FAILURE; }
  BIGENDIAN_64BIT_U8_TO_U128_COPY(key, k);
  expand_key(k, subkey_);
  has_subkeys_ = true;


  return SUCCESS;
}

int32_t seed::encrypt(const uint8_t * const ptext, const uint32_t plen, uint8_t *ctext, const uint32_t clen) noexcept {
  if (16 != plen || 16 != clen) { return FAILURE; }
  if (false == has_subkeys_) { return FAILURE; }
  if (true == enable_intrinsic_func_) {
    intrinsic_encrypt(ptext, ctext);
  } else {
    no_intrinsic_encrypt(ptext, ctext);
  }
  return SUCCESS;
}

int32_t seed::decrypt(const uint8_t * const ctext, const uint32_t clen, uint8_t *ptext, const uint32_t plen) noexcept {
  if (16 != plen || 16 != clen) { return FAILURE; }
  if (false == has_subkeys_) { return FAILURE; }
  if (true == enable_intrinsic_func_) {
    intrinsic_decrypt(ctext, ptext);
  } else {
    no_intrinsic_decrypt(ctext, ptext);
  }
  return SUCCESS;
}

void seed::clear() noexcept {

}

inline void seed::no_intrinsic_encrypt(const uint8_t * const ptext, uint8_t *ctext) const noexcept {
  uint64_t tmppln[2] = {0};
  uint64_t t = 0;

  BIGENDIAN_64BIT_U8_TO_U128_COPY(ptext, tmppln);

  for (int32_t round = 0; round < 15; ++round) {
    t = tmppln[1];
    tmppln[1] = tmppln[0] ^ f_function(tmppln[1], subkey_[round]);
    tmppln[0] = t;
  }
  tmppln[0] ^= f_function(tmppln[1], subkey_[15]);

  BIGENDIAN_64BIT_U128_TO_U8_COPY(tmppln, ctext);
}

inline void seed::no_intrinsic_decrypt(const uint8_t * const ctext, uint8_t *ptext) const noexcept {
  uint64_t tmpcphr[2] = {0};
  uint64_t t = 0;

  BIGENDIAN_64BIT_U8_TO_U128_COPY(ctext, tmpcphr);

  for (int32_t round = 15; round > 0; --round) {
    t = tmpcphr[1];
    tmpcphr[1] = tmpcphr[0] ^ f_function(tmpcphr[1], subkey_[round]);
    tmpcphr[0] = t;
  }
  tmpcphr[0] ^= f_function(tmpcphr[1], subkey_[0]);

  BIGENDIAN_64BIT_U128_TO_U8_COPY(tmpcphr, ptext);
}

inline void seed::intrinsic_encrypt(const uint8_t * const ptext, uint8_t *ctext) const noexcept {

}

inline void seed::intrinsic_decrypt(const uint8_t * const ctext, uint8_t *ptext) const noexcept {

}

inline void seed::expand_key(const uint64_t * const key, uint64_t *skeys) const noexcept {
  int32_t kpos = 0;
  uint64_t tmpk[2] = {0};
  uint64_t *kptr = nullptr;

  BIGENDIAN_64BIT_U8_TO_U128_COPY(key, tmpk);

  for (int32_t round = 0; round < 16; ++round) {
    skeys[round] = (uint64_t)g_function(((uint32_t)(tmpk[0] >> 32) + (uint32_t)(tmpk[1] >> 32) - kc[round])) << 32 | 
                   (uint64_t)g_function(((uint32_t)(tmpk[0] & 0x0000'0000'FFFF'FFFF) - (uint32_t)(tmpk[1] & 0x0000'0000'FFFF'FFFF) + kc[round]));

    if (1 == key_round_schd[round]) { /* Odd round */
      tmpk[0] = ROTATE_RIGHT64(tmpk[0], 8);
    } else {                          /* Even round */
      tmpk[1] = ROTATE_LEFT64(tmpk[1], 8);
    }
  }
}

inline uint64_t seed::f_function(uint64_t r, uint64_t k) const noexcept {
  uint32_t tmpr[2] = {0};
  uint32_t tmpk[2] = {0};

  SEED_BIGENDIAN_U64_TO_U32_COPY(r, tmpr);
  SEED_BIGENDIAN_U64_TO_U32_COPY(k, tmpk);

  return ((uint64_t)g_function(g_function(g_function((tmpr[0] ^ tmpk[0]) ^ (tmpr[1] ^ tmpk[1])) ^ g_function((tmpr[0] ^ tmpk[0]) ^ (tmpr[1] ^ tmpk[1])))) + 
          (uint64_t)g_function(g_function((tmpr[0] ^ tmpk[0]) ^ (tmpr[1] ^ tmpk[1])) ^ (tmpr[0] ^ tmpk[0]))) << 32 | 
         ((uint64_t)g_function(g_function(g_function((tmpr[0] ^ tmpk[0]) ^ (tmpr[1] ^ tmpk[1])) ^ g_function((tmpr[0] ^ tmpk[0]) ^ (tmpr[1] ^ tmpk[1])))));
}

inline uint32_t seed::g_function(uint32_t r) const noexcept {
  uint32_t z = 0;
  uint8_t z8bit[4] = {0};
  uint8_t *r8bit = nullptr;

  BIGENDIAN_U32_TO_U8(r, r8bit);

  z8bit[0]  = (sbox0[r8bit[0]] & M0)  ^ (sbox1[r8bit[1]] & M1)  ^ (sbox0[r8bit[2]] & M2)  ^ (sbox1[r8bit[3]] & M3);
  z8bit[1]  = (sbox0[r8bit[0]] & M1)  ^ (sbox1[r8bit[1]] & M2)  ^ (sbox0[r8bit[2]] & M3)  ^ (sbox1[r8bit[3]] & M0);
  z8bit[2]  = (sbox0[r8bit[0]] & M2)  ^ (sbox1[r8bit[1]] & M3)  ^ (sbox0[r8bit[2]] & M0)  ^ (sbox1[r8bit[3]] & M1);
  z8bit[3]  = (sbox0[r8bit[0]] & M3)  ^ (sbox1[r8bit[1]] & M0)  ^ (sbox0[r8bit[2]] & M1)  ^ (sbox1[r8bit[3]] & M2);

  BIGENDIAN_U8_TO_U32_COPY(z8bit, z);

  return z;
}

}