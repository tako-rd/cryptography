/*!
* cryptography library
*
* Copyright (c) 2022 tako
*
* This software is released under the MIT license.
* see https://opensource.org/licenses/MIT
*/

#include "camellia.h"
#include "bit_utill.h"
#include "byte_utill.h"

namespace cryptography {

#define SUCCESS                 0
#define FAILURE                 1

#ifdef __LITTLE_ENDIAN__
  #define ARRAY_128BIT_LEFT     1
  #define ARRAY_128BIT_RIGHT    0

  #define ARRAY_128BIT_LL       4
  #define ARRAY_128BIT_LL       4

#elif __BIG_ENDIAN__

#endif

#define SGM1  0xA09E667F3BCC908BULL
#define SGM2  0xB67AE8584CAA73B2ULL
#define SGM3  0xC6EF372FE94F82BEULL
#define SGM4  0x54FF53A5F1D36F1CULL
#define SGM5  0x10E527FADE682D1DULL
#define SGM6  0xB05688C2B3E6C1FDULL

#define SGM1L  0xA09E667FU
#define SGM1R  0x3BCC908BU
#define SGM2L  0xB67AE858U
#define SGM2R  0x4CAA73B2U
#define SGM3L  0xC6EF372FU
#define SGM3R  0xE94F82BEU
#define SGM4L  0x54FF53A5U
#define SGM4R  0xF1D36F1CU
#define SGM5L  0x10E527FAU
#define SGM5R  0xDE682D1DU
#define SGM6L  0xB05688C2U
#define SGM6R  0xB3E6C1FDU


static const uint8_t sbox1[256] = {
  0x70, 0x82, 0x2C, 0xEC, 0xB3, 0x27, 0xC0, 0xE5, 0xE4, 0x85, 0x57, 0x35, 0xEA, 0x0C, 0xAE, 0x41,
  0x23, 0xEF, 0x6B, 0x93, 0x45, 0x19, 0xA5, 0x21, 0xED, 0x0E, 0x4F, 0x4E, 0x1D, 0x65, 0x92, 0xBD,
  0x86, 0xB8, 0xAF, 0x8F, 0x7C, 0xEB, 0x1F, 0xCE, 0x3E, 0x30, 0xDC, 0x5F, 0x5E, 0xC5, 0x0B, 0x1A,
  0xA6, 0xE1, 0x39, 0xCA, 0xD5, 0x47, 0x5D, 0x3D, 0xD9, 0x01, 0x5A, 0xD6, 0x51, 0x56, 0x6C, 0x4D,
  0x8B, 0x0D, 0x9A, 0x66, 0xFB, 0xCC, 0xB0, 0x2D, 0x74, 0x12, 0x2B, 0x20, 0xF0, 0xB1, 0x84, 0x99,
  0xDF, 0x4C, 0xCB, 0xC2, 0x34, 0x7E, 0x76, 0x05, 0x6D, 0xB7, 0xA9, 0x31, 0xD1, 0x17, 0x04, 0xD7,
  0x14, 0x58, 0x3A, 0x61, 0xDE, 0x1B, 0x11, 0x1C, 0x32, 0x0F, 0x9C, 0x16, 0x53, 0x18, 0xF2, 0x22,
  0xFE, 0x44, 0xCF, 0xB2, 0xC3, 0xB5, 0x7A, 0x91, 0x24, 0x08, 0xE8, 0xA8, 0x60, 0xFC, 0x69, 0x50,
  0xAA, 0xD0, 0xA0, 0x7D, 0xA1, 0x89, 0x62, 0x97, 0x54, 0x5B, 0x1E, 0x95, 0xE0, 0xFF, 0x64, 0xD2,
  0x10, 0xC4, 0x00, 0x48, 0xA3, 0xF7, 0x75, 0xDB, 0x8A, 0x03, 0xE6, 0xDA, 0x09, 0x3F, 0xDD, 0x94,
  0x87, 0x5C, 0x83, 0x02, 0xCD, 0x4A, 0x90, 0x33, 0x73, 0x67, 0xF6, 0xF3, 0x9D, 0x7F, 0xBF, 0xE2,
  0x52, 0x9B, 0xD8, 0x26, 0xC8, 0x37, 0xC6, 0x3B, 0x81, 0x96, 0x6F, 0x4B, 0x13, 0xBE, 0x63, 0x2E,
  0xE9, 0x79, 0xA7, 0x8C, 0x9F, 0x6E, 0xBC, 0x8E, 0x29, 0xF5, 0xF9, 0xB6, 0x2F, 0xFD, 0xB4, 0x59,
  0x78, 0x98, 0x06, 0x6A, 0xE7, 0x46, 0x71, 0xBA, 0xD4, 0x25, 0xAB, 0x42, 0x88, 0xA2, 0x8D, 0xFA,
  0x72, 0x07, 0xB9, 0x55, 0xF8, 0xEE, 0xAC, 0x0A, 0x36, 0x49, 0x2A, 0x68, 0x3C, 0x38, 0xF1, 0xA4,
  0x40, 0x28, 0xD3, 0x7B, 0xBB, 0xC9, 0x43, 0xC1, 0x15, 0xE3, 0xAD, 0xF4, 0x77, 0xC7, 0x80, 0x9E,
};

static const uint8_t sbox2[256] = {
  0xE0, 0x05, 0x58, 0xD9, 0x67, 0x4E, 0x81, 0xCB, 0xC9, 0x0B, 0xAE, 0x6A, 0xD5, 0x18, 0x5D, 0x82,
  0x46, 0xDF, 0xD6, 0x27, 0x8A, 0x32, 0x4B, 0x42, 0xDB, 0x1C, 0x9E, 0x9C, 0x3A, 0xCA, 0x25, 0x7B,
  0x0D, 0x71, 0x5F, 0x1F, 0xF8, 0xD7, 0x3E, 0x9D, 0x7C, 0x60, 0xB9, 0xBE, 0xBC, 0x8B, 0x16, 0x34,
  0x4D, 0xC3, 0x72, 0x95, 0xAB, 0x8E, 0xBA, 0x7A, 0xB3, 0x02, 0xB4, 0xAD, 0xA2, 0xAC, 0xD8, 0x9A,
  0x17, 0x1A, 0x35, 0xCC, 0xF7, 0x99, 0x61, 0x5A, 0xE8, 0x24, 0x56, 0x40, 0xE1, 0x63, 0x09, 0x33,
  0xBF, 0x98, 0x97, 0x85, 0x68, 0xFC, 0xEC, 0x0A, 0xDA, 0x6F, 0x53, 0x62, 0xA3, 0x2E, 0x08, 0xAF,
  0x28, 0xB0, 0x74, 0xC2, 0xBD, 0x36, 0x22, 0x38, 0x64, 0x1E, 0x39, 0x2C, 0xA6, 0x30, 0xE5, 0x44,
  0xFD, 0x88, 0x9F, 0x65, 0x87, 0x6B, 0xF4, 0x23, 0x48, 0x10, 0xD1, 0x51, 0xC0, 0xF9, 0xD2, 0xA0,
  0x55, 0xA1, 0x41, 0xFA, 0x43, 0x13, 0xC4, 0x2F, 0xA8, 0xB6, 0x3C, 0x2B, 0xC1, 0xFF, 0xC8, 0xA5,
  0x20, 0x89, 0x00, 0x90, 0x47, 0xEF, 0xEA, 0xB7, 0x15, 0x06, 0xCD, 0xB5, 0x12, 0x7E, 0xBB, 0x29,
  0x0F, 0xB8, 0x07, 0x04, 0x9B, 0x94, 0x21, 0x66, 0xE6, 0xCE, 0xED, 0xE7, 0x3B, 0xFE, 0x7F, 0xC5,
  0xA4, 0x37, 0xB1, 0x4C, 0x91, 0x6E, 0x8D, 0x76, 0x03, 0x2D, 0xDE, 0x96, 0x26, 0x7D, 0xC6, 0x5C,
  0xD3, 0xF2, 0x4F, 0x19, 0x3F, 0xDC, 0x79, 0x1D, 0x52, 0xEB, 0xF3, 0x6D, 0x5E, 0xFB, 0x69, 0xB2,
  0xF0, 0x31, 0x0C, 0xD4, 0xCF, 0x8C, 0xE2, 0x75, 0xA9, 0x4A, 0x57, 0x84, 0x11, 0x45, 0x1B, 0xF5,
  0xE4, 0x0E, 0x73, 0xAA, 0xF1, 0xDD, 0x59, 0x14, 0x6C, 0x92, 0x54, 0xD0, 0x78, 0x70, 0xE3, 0x49,
  0x80, 0x50, 0xA7, 0xF6, 0x77, 0x93, 0x86, 0x83, 0x2A, 0xC7, 0x5B, 0xE9, 0xEE, 0x8F, 0x01, 0x3D,
};


static const uint8_t sbox3[256] = {
  0x38, 0x41, 0x16, 0x76, 0xD9, 0x93, 0x60, 0xF2, 0x72, 0xC2, 0xAB, 0x9A, 0x75, 0x06, 0x57, 0xA0,
  0x91, 0xF7, 0xB5, 0xC9, 0xA2, 0x8C, 0xD2, 0x90, 0xF6, 0x07, 0xA7, 0x27, 0x8E, 0xB2, 0x49, 0xDE,
  0x43, 0x5C, 0xD7, 0xC7, 0x3E, 0xF5, 0x8F, 0x67, 0x1F, 0x18, 0x6E, 0xAF, 0x2F, 0xE2, 0x85, 0x0D,
  0x53, 0xF0, 0x9C, 0x65, 0xEA, 0xA3, 0xAE, 0x9E, 0xEC, 0x80, 0x2D, 0x6B, 0xA8, 0x2B, 0x36, 0xA6,
  0xC5, 0x86, 0x4D, 0x33, 0xFD, 0x66, 0x58, 0x96, 0x3A, 0x09, 0x95, 0x10, 0x78, 0xD8, 0x42, 0xCC,
  0xEF, 0x26, 0xE5, 0x61, 0x1A, 0x3F, 0x3B, 0x82, 0xB6, 0xDB, 0xD4, 0x98, 0xE8, 0x8B, 0x02, 0xEB,
  0x0A, 0x2C, 0x1D, 0xB0, 0x6F, 0x8D, 0x88, 0x0E, 0x19, 0x87, 0x4E, 0x0B, 0xA9, 0x0C, 0x79, 0x11,
  0x7F, 0x22, 0xE7, 0x59, 0xE1, 0xDA, 0x3D, 0xC8, 0x12, 0x04, 0x74, 0x54, 0x30, 0x7E, 0xB4, 0x28,
  0x55, 0x68, 0x50, 0xBE, 0xD0, 0xC4, 0x31, 0xCB, 0x2A, 0xAD, 0x0F, 0xCA, 0x70, 0xFF, 0x32, 0x69,
  0x08, 0x62, 0x00, 0x24, 0xD1, 0xFB, 0xBA, 0xED, 0x45, 0x81, 0x73, 0x6D, 0x84, 0x9F, 0xEE, 0x4A,
  0xC3, 0x2E, 0xC1, 0x01, 0xE6, 0x25, 0x48, 0x99, 0xB9, 0xB3, 0x7B, 0xF9, 0xCE, 0xBF, 0xDF, 0x71,
  0x29, 0xCD, 0x6C, 0x13, 0x64, 0x9B, 0x63, 0x9D, 0xC0, 0x4B, 0xB7, 0xA5, 0x89, 0x5F, 0xB1, 0x17,
  0xF4, 0xBC, 0xD3, 0x46, 0xCF, 0x37, 0x5E, 0x47, 0x94, 0xFA, 0xFC, 0x5B, 0x97, 0xFE, 0x5A, 0xAC,
  0x3C, 0x4C, 0x03, 0x35, 0xF3, 0x23, 0xB8, 0x5D, 0x6A, 0x92, 0xD5, 0x21, 0x44, 0x51, 0xC6, 0x7D,
  0x39, 0x83, 0xDC, 0xAA, 0x7C, 0x77, 0x56, 0x05, 0x1B, 0xA4, 0x15, 0x34, 0x1E, 0x1C, 0xF8, 0x52,
  0x20, 0x14, 0xE9, 0xBD, 0xDD, 0xE4, 0xA1, 0xE0, 0x8A, 0xF1, 0xD6, 0x7A, 0xBB, 0xE3, 0x40, 0x4F,
};

static const uint8_t sbox4[256] = {
  0x70, 0x2C, 0xB3, 0xC0, 0xE4, 0x57, 0xEA, 0xAE, 0x23, 0x6B, 0x45, 0xA5, 0xED, 0x4F, 0x1D, 0x92,
  0x86, 0xAF, 0x7C, 0x1F, 0x3E, 0xDC, 0x5E, 0x0B, 0xA6, 0x39, 0xD5, 0x5D, 0xD9, 0x5A, 0x51, 0x6C,
  0x8B, 0x9A, 0xFB, 0xB0, 0x74, 0x2B, 0xF0, 0x84, 0xDF, 0xCB, 0x34, 0x76, 0x6D, 0xA9, 0xD1, 0x04,
  0x14, 0x3A, 0xDE, 0x11, 0x32, 0x9C, 0x53, 0xF2, 0xFE, 0xCF, 0xC3, 0x7A, 0x24, 0xE8, 0x60, 0x69,
  0xAA, 0xA0, 0xA1, 0x62, 0x54, 0x1E, 0xE0, 0x64, 0x10, 0x00, 0xA3, 0x75, 0x8A, 0xE6, 0x09, 0xDD,
  0x87, 0x83, 0xCD, 0x90, 0x73, 0xF6, 0x9D, 0xBF, 0x52, 0xD8, 0xC8, 0xC6, 0x81, 0x6F, 0x13, 0x63,
  0xE9, 0xA7, 0x9F, 0xBC, 0x29, 0xF9, 0x2F, 0xB4, 0x78, 0x06, 0xE7, 0x71, 0xD4, 0xAB, 0x88, 0x8D,
  0x72, 0xB9, 0xF8, 0xAC, 0x36, 0x2A, 0x3C, 0xF1, 0x40, 0xD3, 0xBB, 0x43, 0x15, 0xAD, 0x77, 0x80,
  0x82, 0xEC, 0x27, 0xE5, 0x85, 0x35, 0x0C, 0x41, 0xEF, 0x93, 0x19, 0x21, 0x0E, 0x4E, 0x65, 0xBD,
  0xB8, 0x8F, 0xEB, 0xCE, 0x30, 0x5F, 0xC5, 0x1A, 0xE1, 0xCA, 0x47, 0x3D, 0x01, 0xD6, 0x56, 0x4D,
  0x0D, 0x66, 0xCC, 0x2D, 0x12, 0x20, 0xB1, 0x99, 0x4C, 0xC2, 0x7E, 0x05, 0xB7, 0x31, 0x17, 0xD7,
  0x58, 0x61, 0x1B, 0x1C, 0x0F, 0x16, 0x18, 0x22, 0x44, 0xB2, 0xB5, 0x91, 0x08, 0xA8, 0xFC, 0x50,
  0xD0, 0x7D, 0x89, 0x97, 0x5B, 0x95, 0xFF, 0xD2, 0xC4, 0x48, 0xF7, 0xDB, 0x03, 0xDA, 0x3F, 0x94,
  0x5C, 0x02, 0x4A, 0x33, 0x67, 0xF3, 0x7F, 0xE2, 0x9B, 0x26, 0x37, 0x3B, 0x96, 0x4B, 0xBE, 0x2E,
  0x79, 0x8C, 0x6E, 0x8E, 0xF5, 0xB6, 0xFD, 0x59, 0x98, 0x6A, 0x46, 0xBA, 0x25, 0x42, 0xA2, 0xFA,
  0x07, 0x55, 0xEE, 0x0A, 0x49, 0x68, 0x38, 0xA4, 0x28, 0x7B, 0xC9, 0xC1, 0xE3, 0xF4, 0xC7, 0x9E,
};

static const uint8_t left_rschd[7]  = {0, 1, 0, 1, 0, 1};
static const uint8_t right_rschd[7] = {1, 0, 1, 0, 1, 0};

int32_t camellia::initialize(const uint16_t mode, const uint8_t *key, const uint64_t klen, bool enable_intrinsic) {
  uint64_t *tmpkey = nullptr;

  if (CAMELLIA128 != (mode & EXTRACT_TYPE) &&
      CAMELLIA192 != (mode & EXTRACT_TYPE) &&
      CAMELLIA256 != (mode & EXTRACT_TYPE)) {
    return FAILURE;
  }

  mode_ = mode;
  enable_intrinsic_func_ = enable_intrinsic;

  switch (((mode_ & EXTRACT_TYPE) >> 8)) {
    case (CAMELLIA128 >> 8):
      BIGENDIAN_U8_TO_U128(key, tmpkey);
      expand_128bit_key(tmpkey);
      memset(&tmpkey, 0xCC, 16);
      has_subkeys_ = true;
      nk_ = 17;
      nkl_ = 3;
      n6r_ = 3;
      break;
    case (CAMELLIA192 >> 8):    
      BIGENDIAN_U8_TO_U192(key, tmpkey);
      expand_192bit_key(tmpkey);
      memset(&tmpkey, 0xCC, 24);
      has_subkeys_ = true;
      nk_ = 23;
      nkl_ = 5;
      n6r_ = 4;
      break;
    case (CAMELLIA256 >> 8):
      BIGENDIAN_U8_TO_U256(key, tmpkey);
      expand_256bit_key(tmpkey);
      memset(&tmpkey, 0xCC, 32);
      has_subkeys_ = true;
      nk_ = 23;
      nkl_ = 5;
      n6r_ = 4;
      break;
    default:
      break;
  }
}

int32_t camellia::encrypt(const uint8_t * const ptext, const uint64_t plen, uint8_t *ctext, const uint64_t clen) {
  if (16 != plen || 16 != clen) { return FAILURE; }
  if (true == enable_intrinsic_func_) {
    intrinsic_encrypt(ptext, ctext);
  } else {
    no_intrinsic_encrypt(ptext, ctext);
  }
  return SUCCESS;
}

int32_t camellia::decrypt(const uint8_t * const ctext, const uint64_t clen, uint8_t *ptext, const uint64_t plen) {
  if (16 != plen || 16 != clen) { return FAILURE; }
  if (true == enable_intrinsic_func_) {
    intrinsic_decrypt(ctext, ptext);
  } else {
    no_intrinsic_decrypt(ctext, ptext);
  }
  return SUCCESS;
}

void camellia::clear() noexcept {
  memset(kw_, 0xCC, sizeof(kw_));
  memset(k_, 0xCC, sizeof(k_));
  memset(kl_, 0xCC, sizeof(kl_));
  has_subkeys_ = false;
}

inline void camellia::no_intrinsic_encrypt(const uint8_t * const ptext, uint8_t *ctext) const noexcept {
  uint64_t tmptext[2]= {0};
  uint64_t *tmpptr = nullptr;
  uint64_t tmpsawp = 0;
  uint32_t kpos = 0, klpos = 0;
  uint8_t *outptr = nullptr;

  BIGENDIAN_U8_TO_U128(ptext, tmpptr);

  tmptext[0] = tmpptr[0];
  tmptext[1] = tmpptr[1];

  tmptext[0] ^= kw_[0];
  tmptext[1] ^= kw_[1];

  for (uint32_t round = 0; round < n6r_; ++round) {

    for (uint32_t inrnd = 0; inrnd < 6; ++inrnd) {
      tmptext[right_rschd[inrnd]] ^= f_function(tmptext[left_rschd[inrnd]], k_[kpos]);
      ++kpos;
    }

    if (n6r_ != round) {
      fl_function(tmptext[0], kl_[klpos]);
      ++klpos;

      inv_fl_function(tmptext[1], kl_[klpos]);
      ++klpos;
    }
  }

  tmpsawp = tmptext[1];
  tmptext[1] = tmptext[0];
  tmptext[1] = tmpsawp;

  tmptext[0] ^= kw_[2];
  tmptext[1] ^= kw_[3];

  BIGENDIAN_U128_TO_U8(tmptext, outptr);

  for (uint32_t j = 0; j < 16; ++j) {
    ctext[j] = outptr[j];
  }
}

inline void camellia::no_intrinsic_decrypt(const uint8_t * const ctext, uint8_t *ptext) const noexcept {
  uint64_t tmptext[2]= {0};
  uint64_t *tmpptr = nullptr;
  uint64_t tmpsawp = 0;
  uint32_t kpos = nk_, klpos = nkl_;
  uint8_t *outptr = nullptr;

  BIGENDIAN_U8_TO_U128(ctext, tmpptr);

  tmptext[0] = tmpptr[0];
  tmptext[1] = tmpptr[1];

  tmptext[0] ^= kw_[2];
  tmptext[1] ^= kw_[3];

  for (uint32_t round = 0; round < n6r_; ++round) {

    for (uint32_t inrnd = 0; inrnd < 6; ++inrnd) {
      tmptext[right_rschd[inrnd]] ^= f_function(tmptext[left_rschd[inrnd]], k_[kpos]);
      --kpos;
    }

    if (n6r_ != round) {
      fl_function(tmptext[0], kl_[klpos]);
      --klpos;

      inv_fl_function(tmptext[1], kl_[klpos]);
      --klpos;
    }
  }

  tmpsawp = tmptext[1];
  tmptext[1] = tmptext[0];
  tmptext[1] = tmpsawp;

  tmptext[0] ^= kw_[0];
  tmptext[1] ^= kw_[1];

  BIGENDIAN_U128_TO_U8(tmptext, outptr);

  for (uint32_t j = 0; j < 16; ++j) {
    ptext[j] = outptr[j];
  }
}

inline void camellia::intrinsic_encrypt(const uint8_t * const ptext, uint8_t *ctext) const noexcept {

}

inline void camellia::intrinsic_decrypt(const uint8_t * const ctext, uint8_t *ptext) const noexcept {

}

inline void camellia::expand_128bit_key(const uint64_t * const key) noexcept {
  uint64_t kr[2] = {0};
  uint64_t kl[2] = {0};
  uint64_t ka[2] = {0};
  uint64_t tk[2] = {0};

  kl[0] = key[0];
  kl[1] = key[1];
  kr[0] = 0;
  kr[1] = 0;

  tk[0] = key[0];
  tk[1] = key[1];

  tk[0] = f_function(tk[0], SGM1);
  tk[1] ^= tk[0];

  tk[1] = f_function(tk[1], SGM2);
  tk[0] ^= tk[1];

  tk[0] = kl[0];
  tk[1] = kl[1];

  tk[0] = f_function(tk[0], SGM3);
  tk[1] ^= tk[0];

  tk[1] = f_function(tk[1], SGM4);
  tk[0] ^=  tk[1];

  ka[0] = tk[0];
  ka[1] = tk[1];

  kw_[0] = kl[0];
  kw_[1] = kl[1];
  
  k_[0] = ka[0];
  k_[1] = ka[1];
  k_[2] = ROTATE_RIGHT64(kl[0], 15);
  k_[3] = ROTATE_RIGHT64(kl[1], 15);
  k_[4] = ROTATE_RIGHT64(ka[0], 15);
  k_[5] = ROTATE_RIGHT64(ka[1], 15);

  kl_[0] = ROTATE_RIGHT64(ka[0], 30);
  kl_[1] = ROTATE_RIGHT64(ka[1], 30);

  k_[6] = ROTATE_RIGHT64(kl[0], 45);
  k_[7] = ROTATE_RIGHT64(kl[1], 45);
  k_[8] = ROTATE_RIGHT64(ka[0], 45);
  k_[9] = ROTATE_RIGHT64(ka[1], 60);
  k_[10] = ROTATE_RIGHT64(kl[0], 60);
  k_[11] = ROTATE_RIGHT64(kl[1], 60);

  kl_[2] = ROTATE_RIGHT64(kl[0], 77);
  kl_[3] = ROTATE_RIGHT64(kl[1], 77);

  k_[12] = ROTATE_RIGHT64(kl[0], 94);
  k_[13] = ROTATE_RIGHT64(kl[1], 94);
  k_[14] = ROTATE_RIGHT64(ka[0], 94);
  k_[15] = ROTATE_RIGHT64(ka[1], 94);
  k_[16] = ROTATE_RIGHT64(kl[0], 111);
  k_[17] = ROTATE_RIGHT64(kl[1], 111);

  kw_[2] = ROTATE_RIGHT64(ka[0], 111);
  kw_[3] = ROTATE_RIGHT64(ka[1], 111);
}

inline void camellia::expand_192bit_key(const uint64_t * const key) noexcept {
  uint64_t kr[2] = {0};
  uint64_t kl[2] = {0};
  uint64_t ka[2] = {0};
  uint64_t kb[2] = {0};
  uint64_t tk[2] = {0};

  kl[0] = key[0];
  kl[1] = key[1];
  kr[0] = key[2];
  kr[1] = ~key[2];

  tk[0] = kl[0] ^ kr[0];
  tk[1] = kl[1] ^ kr[1];

  tk[0] = f_function(tk[0], SGM1);
  tk[1] ^= tk[0];

  tk[1] = f_function(tk[1], SGM2);
  tk[0] ^= tk[1];

  tk[0] = kl[0];
  tk[1] = kl[1];

  tk[0] = f_function(tk[0], SGM3);
  tk[1] ^= tk[0];

  tk[1] = f_function(tk[1], SGM4);
  tk[0] ^= tk[1];

  ka[0] = tk[0]; 
  ka[1] = tk[1]; 

  tk[0] ^= kr[0];
  tk[1] ^= kr[1];

  tk[0] = f_function(tk[0], SGM5);
  tk[1] ^= tk[0];

  tk[1] = f_function(tk[1], SGM6);
  tk[0] ^= tk[1];

  kb[0] = tk[0]; 
  kb[1] = tk[1]; 

  kw_[0] = kl[0];
  kw_[1] = kl[1];
  
  k_[0] = kb[0];
  k_[1] = kb[1];
  k_[2] = ROTATE_RIGHT64(kr[0], 15);
  k_[3] = ROTATE_RIGHT64(kr[1], 15);
  k_[4] = ROTATE_RIGHT64(ka[0], 15);
  k_[5] = ROTATE_RIGHT64(ka[1], 15);

  kl_[0] = ROTATE_RIGHT64(kr[0], 30);
  kl_[1] = ROTATE_RIGHT64(kr[1], 30);

  k_[6] = ROTATE_RIGHT64(kb[0], 30);
  k_[7] = ROTATE_RIGHT64(kb[1], 30);
  k_[8] = ROTATE_RIGHT64(kl[0], 45);
  k_[9] = ROTATE_RIGHT64(kl[1], 45);
  k_[10] = ROTATE_RIGHT64(ka[0], 45);
  k_[11] = ROTATE_RIGHT64(ka[1], 45);

  kl_[2] = ROTATE_RIGHT64(kl[0], 60);
  kl_[3] = ROTATE_RIGHT64(kl[1], 60);

  k_[12] = ROTATE_RIGHT64(kr[0], 60);
  k_[13] = ROTATE_RIGHT64(kr[1], 60);
  k_[14] = ROTATE_RIGHT64(kb[0], 60);
  k_[15] = ROTATE_RIGHT64(kb[1], 60);
  k_[16] = ROTATE_RIGHT64(kl[0], 77);
  k_[17] = ROTATE_RIGHT64(kl[1], 77);

  kl_[4] = ROTATE_RIGHT64(ka[0], 77);
  kl_[5] = ROTATE_RIGHT64(ka[1], 77);

  k_[18] = ROTATE_RIGHT64(kr[0], 94);
  k_[19] = ROTATE_RIGHT64(kr[1], 94);
  k_[20] = ROTATE_RIGHT64(ka[0], 94);
  k_[21] = ROTATE_RIGHT64(ka[1], 94);
  k_[22] = ROTATE_RIGHT64(kl[0], 111);
  k_[23] = ROTATE_RIGHT64(kl[1], 111);

  kw_[2] = ROTATE_RIGHT64(kb[0], 111);
  kw_[3] = ROTATE_RIGHT64(kb[1], 111);
}

inline void camellia::expand_256bit_key(const uint64_t * const key) noexcept {
  uint64_t kr[2] = {0};
  uint64_t kl[2] = {0};
  uint64_t ka[2] = {0};
  uint64_t kb[2] = {0};
  uint64_t tk[2] = {0};

  kl[0] = key[0];
  kl[1] = key[1];
  kr[0] = key[2];
  kr[1] = key[3];

  tk[0] = kl[0] ^ kr[0];
  tk[1] = kl[1] ^ kr[1];

  tk[0] = f_function(tk[0], SGM1);
  tk[1] ^= tk[0];

  tk[1] = f_function(tk[1], SGM2);
  tk[0] ^= tk[1];

  tk[0] = kl[0];
  tk[1] = kl[1];

  tk[0] = f_function(tk[0], SGM3);
  tk[1] ^= tk[0];

  tk[1] = f_function(tk[1], SGM4);
  tk[0] ^= tk[1];

  ka[0] = tk[0]; 
  ka[1] = tk[1]; 

  tk[0] ^= kr[0];
  tk[1] ^= kr[1];

  tk[0] = f_function(tk[0], SGM5);
  tk[1] ^= tk[0];

  tk[1] = f_function(tk[1], SGM6);
  tk[0] ^= tk[1];

  kb[0] = tk[0]; 
  kb[1] = tk[1]; 

  kw_[0] = kl[0];
  kw_[1] = kl[1];

  k_[0] = kb[0];
  k_[1] = kb[1];
  k_[2] = ROTATE_RIGHT64(kr[0], 15);
  k_[3] = ROTATE_RIGHT64(kr[1], 15);
  k_[4] = ROTATE_RIGHT64(ka[0], 15);
  k_[5] = ROTATE_RIGHT64(ka[1], 15);

  kl_[0] = ROTATE_RIGHT64(kr[0], 30);
  kl_[1] = ROTATE_RIGHT64(kr[1], 30);

  k_[6] = ROTATE_RIGHT64(kb[0], 30);
  k_[7] = ROTATE_RIGHT64(kb[1], 30);
  k_[8] = ROTATE_RIGHT64(kl[0], 45);
  k_[9] = ROTATE_RIGHT64(kl[1], 45);
  k_[10] = ROTATE_RIGHT64(ka[0], 45);
  k_[11] = ROTATE_RIGHT64(ka[1], 45);

  kl_[2] = ROTATE_RIGHT64(kl[0], 60);
  kl_[3] = ROTATE_RIGHT64(kl[1], 60);

  k_[12] = ROTATE_RIGHT64(kr[0], 60);
  k_[13] = ROTATE_RIGHT64(kr[1], 60);
  k_[14] = ROTATE_RIGHT64(kb[0], 60);
  k_[15] = ROTATE_RIGHT64(kb[1], 60);
  k_[16] = ROTATE_RIGHT64(kl[0], 77);
  k_[17] = ROTATE_RIGHT64(kl[1], 77);

  kl_[4] = ROTATE_RIGHT64(ka[0], 77);
  kl_[5] = ROTATE_RIGHT64(ka[1], 77);

  k_[18] = ROTATE_RIGHT64(kr[0], 94);
  k_[19] = ROTATE_RIGHT64(kr[1], 94);
  k_[20] = ROTATE_RIGHT64(ka[0], 94);
  k_[21] = ROTATE_RIGHT64(ka[1], 94);
  k_[22] = ROTATE_RIGHT64(kl[0], 111);
  k_[23] = ROTATE_RIGHT64(kl[1], 111);

  kw_[2] = ROTATE_RIGHT64(kb[0], 111);
  kw_[3] = ROTATE_RIGHT64(kb[1], 111);
}


inline uint64_t camellia::f_function(uint64_t in, uint64_t key) const noexcept {
  uint8_t *in8bit = nullptr;
  uint8_t *key8bit = nullptr;
  uint64_t *result = nullptr;

  BIGENDIAN_U64_TO_U8(in, in8bit);
  BIGENDIAN_U64_TO_U8(key, key8bit);

  in8bit[0] ^= key8bit[0];
  in8bit[1] ^= key8bit[1];
  in8bit[2] ^= key8bit[2];
  in8bit[3] ^= key8bit[3];
  in8bit[4] ^= key8bit[4];
  in8bit[5] ^= key8bit[5];
  in8bit[6] ^= key8bit[6];
  in8bit[7] ^= key8bit[7];
  
  s_function(in8bit);
  p_function(in8bit);

  BIGENDIAN_U8_TO_U64(in8bit, result);

  return *result;
}

inline uint64_t camellia::fl_function(const uint64_t x, const uint64_t kl) const noexcept {
  uint32_t xl = (uint32_t)(x >> 32);
  uint32_t xr = (uint32_t)(x & 0x0000'FFFF);
  uint32_t kll = (uint32_t)(kl >> 32);
  uint32_t klr = (uint32_t)(kl & 0x0000'FFFF);

  xr ^= ROTATE_LEFT32((xl & kll), 1);
  xl ^= xr | klr;

  return ((uint64_t)xl << 32) | (uint64_t)xr; 
}

inline uint64_t camellia::inv_fl_function(const uint64_t y, const uint64_t kl) const noexcept {
  uint32_t yl = (uint32_t)(y >> 32);
  uint32_t yr = (uint32_t)(y & 0x0000'FFFF);
  uint32_t kll = (uint32_t)(kl >> 32);
  uint32_t klr = (uint32_t)(kl & 0x0000'FFFF);

  yl ^= yr | klr;
  yr ^= ROTATE_LEFT32((yl & kll), 1);

  return ((uint64_t)yl << 32) | (uint64_t)yr; 
}

inline void camellia::s_function(uint8_t *state) const noexcept {
  state[0] = sbox1[state[0]];
  state[1] = sbox2[state[1]];
  state[2] = sbox3[state[2]];
  state[3] = sbox4[state[3]];
  state[4] = sbox2[state[4]];
  state[5] = sbox3[state[5]];
  state[6] = sbox4[state[6]];
  state[7] = sbox1[state[7]];
}

inline void camellia::p_function(uint8_t *state) const noexcept {
  state[0] = state[0] ^ state[5];
  state[1] = state[1] ^ state[6];
  state[2] = state[2] ^ state[7];
  state[3] = state[3] ^ state[4];
  state[4] = state[4] ^ state[2];
  state[5] = state[5] ^ state[3];
  state[6] = state[6] ^ state[0];
  state[7] = state[7] ^ state[1];

  state[4] = state[0] ^ state[7];
  state[5] = state[1] ^ state[4];
  state[6] = state[2] ^ state[5];
  state[7] = state[3] ^ state[6];
  state[0] = state[4] ^ state[3];
  state[1] = state[5] ^ state[0];
  state[2] = state[6] ^ state[1];
  state[3] = state[7] ^ state[3];
}

}